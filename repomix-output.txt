This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
nvim/
  lua/
    config/
      autocmds.lua
      keymaps.lua
      lazy.lua
      options.lua
    plugins/
      bufferline.lua
      catppuccin.lua
      completion.lua
      lspconfig.lua
      markdown-preview.lua
      mini-icons.lua
      mini-move.lua
      neo-tree.lua
      nvim-comment.lua
      nvim-web-devicons.lua
      obsidian.lua
      oil.lua
      plugins.lua
      telescope.lua
      todo-comments.lua
      treesitter.lua
  test/
    mini-move-test.txt
  init.lua
  lazy-lock.json
  lazyvim.json
  LICENSE
  package.json
  README.md
  stylua.toml
tmux/
  .tmux.conf
  tmux.conf
yazi/
  flavors/
    catppuccin-mocha.yazi/
      flavor.toml
      LICENSE
      LICENSE-tmtheme
      README.md
      tmtheme.xml
  keymap.toml
  package.toml
  theme.toml
  yazi.toml
.gitignore
.zshrc
README.md
symlink_dotfiles.sh

================================================================
Files
================================================================

================
File: nvim/lua/config/autocmds.lua
================
-- Autocmds are automatically loaded on the VeryLazy event
-- Default autocmds that are always set: https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/autocmds.lua
--
-- Add any additional autocmds here
-- with `vim.api.nvim_create_autocmd`
--
-- Or remove existing autocmds by their group name (which is prefixed with `lazyvim_` for the defaults)
-- e.g. vim.api.nvim_del_augroup_by_name("lazyvim_wrap_spell")

================
File: nvim/lua/config/keymaps.lua
================
-- Keymaps are automatically loaded on the VeryLazy event
-- Default keymaps that are always set: https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/keymaps.lua
-- Add any additional keymaps here

-- Telescope
vim.keymap.set("n", "<leader>ff", "<cmd>Telescope find_files<cr>", { desc = "Find Files" })
vim.keymap.set("n", "<leader>fg", "<cmd>Telescope live_grep<cr>", { desc = "Live Grep" })
vim.keymap.set("n", "<leader>fb", "<cmd>Telescope buffers<cr>", { desc = "Buffers" })
vim.keymap.set("n", "<leader>fh", "<cmd>Telescope help_tags<cr>", { desc = "Help Tags" })

-- Markdown Preview
vim.keymap.set("n", "<leader>mp", "<cmd>MarkdownPreviewToggle<CR>", { desc = "Toggle Markdown Preview" })

-- yank to clipboard
vim.keymap.set({ "n", "v" }, "<leader>y", [["+y]])

-- save file
vim.keymap.set("n", "<leader>w", "<cmd>w<cr>", { desc = "Save file" })

-- Terminal
vim.keymap.set("n", "<C-_>", function()
  require("lazyvim.util.terminal").open(nil, { cwd = require("lazyvim.util").root() })
end, { desc = "Terminal (Root Dir)" })

vim.keymap.set("t", "<C-_>", "<cmd>close<CR>", { desc = "Hide Terminal", noremap = true, silent = true })

-- format code using Telescope
vim.keymap.set("n", "<leader>fmd", vim.lsp.buf.format)

-- Oil.nvim
vim.keymap.set("n", "-", "<CMD>Oil<CR>", { desc = "Open parent directory" })

================
File: nvim/lua/config/lazy.lua
================
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not (vim.uv or vim.loop).fs_stat(lazypath) then
  local lazyrepo = "https://github.com/folke/lazy.nvim.git"
  local out = vim.fn.system({ "git", "clone", "--filter=blob:none", "--branch=stable", lazyrepo, lazypath })
  if vim.v.shell_error ~= 0 then
    vim.api.nvim_echo({
      { "Failed to clone lazy.nvim:\n", "ErrorMsg" },
      { out, "WarningMsg" },
      { "\nPress any key to exit..." },
    }, true, {})
    vim.fn.getchar()
    os.exit(1)
  end
end
vim.opt.rtp:prepend(lazypath)

require("lazy").setup({
  spec = {
    -- add LazyVim and import its plugins
    { "LazyVim/LazyVim", import = "lazyvim.plugins" },
    -- import/override with your plugins
    { import = "plugins" },
  },
  defaults = {
    -- By default, only LazyVim plugins will be lazy-loaded. Your custom plugins will load during startup.
    -- If you know what you're doing, you can set this to `true` to have all your custom plugins lazy-loaded by default.
    lazy = false,
    -- It's recommended to leave version=false for now, since a lot the plugin that support versioning,
    -- have outdated releases, which may break your Neovim install.
    version = false, -- always use the latest git commit
    -- version = "*", -- try installing the latest stable version for plugins that support semver
  },
  install = { colorscheme = { "tokyonight", "habamax" } },
  checker = {
    enabled = true, -- check for plugin updates periodically
    notify = false, -- notify on update
  }, -- automatically check for plugin updates
  performance = {
    rtp = {
      -- disable some rtp plugins
      disabled_plugins = {
        "gzip",
        -- "matchit",
        -- "matchparen",
        -- "netrwPlugin",
        "tarPlugin",
        "tohtml",
        "tutor",
        "zipPlugin",
      },
    },
  },
})

================
File: nvim/lua/config/options.lua
================
-- Options are automatically loaded before lazy.nvim startup
-- Default options that are always set: https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/options.lua
-- Add any additional options here

-- Add Mason bin to PATH
local mason_bin = vim.fn.stdpath("data") .. "/mason/bin"
vim.env.PATH = mason_bin .. ":" .. vim.env.PATH

-- Enable LSP logging for debugging
vim.lsp.set_log_level("debug")

-- Option to save log to a file
local logfile = vim.fn.stdpath("cache") .. "/lsp.log"
vim.fn.setenv("LSP_LOG_FILE", logfile)
vim.opt.spell = true
vim.opt.encoding = "utf-8" -- set encoding vim.opt.nu = true -- enable line numbers vim.opt.relativenumber = true -- relative line numbers vim.opt.tabstop = 4 vim.opt.softtabstop = 4 vim.opt.shiftwidth = 4 vim.opt.expandtab = true -- convert tabs to spaces vim.wo.wrap = false -- do not wrap lines vim.opt.autoindent = true -- auto indentation vim.opt.list = true -- show tab characters and trailing whitespace vim.opt.formatoptions:remove("t") -- no auto-intent of line breaks, keep line wrap enabled vim.opt.listchars = "tab:»\\ ,extends:›,precedes:‹,nbsp:·,trail:·" -- show tab characters and trailing whitespace vim.opt.ignorecase = true -- ignore case when searching vim.opt.smartcase = true -- unless capital letter in search vim.opt.swapfile = false -- do not use a swap file for the buffer vim.opt.backup = false -- do not keep a backup file vim.opt.undodir = os.getenv("HOME") .. "/.vim/undodir" -- set directory where undo files are stored vim.opt.undofile = true -- save undo history to a file vim.opt.hlsearch = false -- do not highlight all matches on previous search pattern vim.opt.incsearch = true -- incrementally highlight searches as you type vim.opt.termguicolors = true -- enable true color support vim.opt.scrolloff = 8 -- minimum number of lines to keep above and below the cursor
vim.opt.sidescrolloff = 8 --minimum number of columns to keep above and below the cursor
vim.opt.signcolumn = "yes" -- always show the sign column, to avoid text shifting when signs are displayed
vim.opt.isfname:append("@-@") -- include '@' in the set of characters considered part of a file name
vim.opt.updatetime = 50 -- Time in milliseconds to wait before triggering the plugin events after a change

vim.api.nvim_create_autocmd({ "BufNewFile", "BufRead" }, {
  pattern = "*.py",
  callback = function()
    vim.opt.textwidth = 79
    vim.opt.colorcolumn = "79"
  end,
}) -- python formatting

vim.api.nvim_create_autocmd({ "BufNewFile", "BufRead" }, {
  pattern = { "*.js", "*.html", "*.css", "*.lua" },
  callback = function()
    vim.opt.tabstop = 2
    vim.opt.softtabstop = 2
    vim.opt.shiftwidth = 2
  end,
}) -- javascript formatting

vim.api.nvim_create_autocmd("BufReadPost", {
  pattern = "*",
  callback = function()
    if vim.fn.line("'\"") > 0 and vim.fn.line("'\"") <= vim.fn.line("$") then
      vim.cmd('normal! g`"')
    end
  end,
}) -- return to last edit position when opening files

local HighlightYank = vim.api.nvim_create_augroup("HighlightYank", {})
vim.api.nvim_create_autocmd("TextYankPost", {
  group = HighlightYank,
  pattern = "*",
  callback = function()
    vim.highlight.on_yank({
      higroup = "IncSearch",
      timeout = 40,
    })
  end,
}) -- highlight yanked text using the 'IncSearch' highlight group for 40ms

local CleanOnSave = vim.api.nvim_create_augroup("CleanOnSave", {})
vim.api.nvim_create_autocmd({ "BufWritePre" }, {
  group = CleanOnSave,
  pattern = "*",
  command = [[%s/\s\+$//e]],
}) -- remove trailing whitespace from all lines before saving a file)

================
File: nvim/lua/plugins/bufferline.lua
================
return {
  {
    "akinsho/bufferline.nvim",
    version = "*",
    dependencies = "nvim-tree/nvim-web-devicons",
    config = function()
      require("bufferline").setup({
        options = {
          mode = "buffers",
          offsets = {
            {
              filetype = "neo-tree",
              text = "File Explorer",
              separator = true,
              padding = 1,
            },
          },
          separator_style = "thin",
        },
      })

      -- Custom keymaps for buffer navigation
      -- <leader>w to save

      -- <leader>p to toggle to previous buffer (:bp)
      vim.keymap.set("n", "<leader>p", ":bp<CR>", { desc = "Previous buffer" })

      -- <leader>n to toggle to next buffer (:bn)
      vim.keymap.set("n", "<leader>n", ":bn<CR>", { desc = "Next buffer" })

      -- <leader>x to close buffer (:bd)
      vim.keymap.set("n", "M-x", ":bd<CR>", { desc = "Close buffer" })
    end,
  },
}

================
File: nvim/lua/plugins/catppuccin.lua
================
return {
  {
    "catppuccin/nvim",
    name = "catppuccin",
    enabled = false, -- Disable the plugin entirely
    priority = 1000,
    lazy = false,
    opts = {
      flavour = "mocha", -- latte, frappe, macchiato, mocha
      background = {
        light = "latte",
        dark = "mocha",
      },
      transparent_background = false,
      integrations = {
        cmp = true,
        gitsigns = true,
        nvimtree = true,
        neo_tree = false, -- Turn off Neo-tree integration
        telescope = true,
        treesitter = true,
        mason = true,
        which_key = true,
        dashboard = true,
        noice = true,
        notify = true,
      },
    },
  },

  -- Use default tokyonight colorscheme instead
  {
    "LazyVim/LazyVim",
    opts = {
      colorscheme = "tokyonight",
    },
  },
}

================
File: nvim/lua/plugins/completion.lua
================
return {
  -- Core completion engine
  {
    "hrsh7th/nvim-cmp",
    event = { "InsertEnter", "CmdlineEnter" },
    lazy = false, -- Load at startup, NOT lazy-loaded
    priority = 1000, -- Very high priority to ensure it loads first
    dependencies = {
      "L3MON4D3/LuaSnip",
      "saadparwaiz1/cmp_luasnip",
      "hrsh7th/cmp-path",
      "hrsh7th/cmp-buffer",
      "hrsh7th/cmp-nvim-lsp",
    },
    config = function()
      local cmp = require("cmp")
      local luasnip = require("luasnip")
      require("luasnip.loaders.from_vscode").lazy_load()

      -- Check if already configured
      if _G.cmp_setup_complete then
        return
      end

      local has_words_before = function()
        unpack = unpack or table.unpack
        local line, col = unpack(vim.api.nvim_win_get_cursor(0))
        return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
      end

      cmp.setup({
        snippet = {
          expand = function(args)
            luasnip.lsp_expand(args.body)
          end,
        },
        mapping = cmp.mapping.preset.insert({
          ["<C-n>"] = cmp.mapping.select_next_item(),
          ["<C-p>"] = cmp.mapping.select_prev_item(),
          ["<C-d>"] = cmp.mapping.scroll_docs(-4),
          ["<C-f>"] = cmp.mapping.scroll_docs(4),
          ["<C-Space>"] = cmp.mapping.complete(),
          ["<CR>"] = cmp.mapping.confirm({ select = true }),
          ["<Tab>"] = cmp.mapping(function(fallback)
            if cmp.visible() then
              cmp.select_next_item()
            elseif luasnip.expand_or_jumpable() then
              luasnip.expand_or_jump()
            elseif has_words_before() then
              cmp.complete()
            else
              fallback()
            end
          end, { "i", "s" }),
          ["<S-Tab>"] = cmp.mapping(function(fallback)
            if cmp.visible() then
              cmp.select_prev_item()
            elseif luasnip.jumpable(-1) then
              luasnip.jump(-1)
            else
              fallback()
            end
          end, { "i", "s" }),
        }),
        sources = cmp.config.sources({
          { name = "nvim_lsp" },
          { name = "luasnip" },
          { name = "buffer" },
          { name = "path" },
        }),
      })

      -- Mark setup as complete
      _G.cmp_setup_complete = true
    end,
  },

  -- Snippets
  {
    "L3MON4D3/LuaSnip",
    lazy = false,
    dependencies = { "rafamadriz/friendly-snippets" },
  },
}

================
File: nvim/lua/plugins/lspconfig.lua
================
return {
  -- LSP Configuration
  {
    "neovim/nvim-lspconfig",
    dependencies = {
      -- Automatically install LSPs and related tools to stdpath
      "williamboman/mason.nvim",
      "williamboman/mason-lspconfig.nvim",
      { "j-hui/fidget.nvim", opts = {} },
    },
    opts = {
      -- Options for nvim-lspconfig
      diagnostics = {
        underline = true,
        update_in_insert = false,
        virtual_text = { spacing = 4, prefix = "●" },
        severity_sort = true,
      },
      -- LSP Server Settings
      servers = {
        lua_ls = {
          settings = {
            Lua = {
              diagnostics = {
                globals = { "vim" },
              },
              workspace = {
                checkThirdParty = false,
                library = {
                  vim.env.VIMRUNTIME,
                },
              },
              telemetry = { enable = false },
            },
          },
        },
        vtsls = {
          settings = {
            typescript = {
              inlayHints = {
                includeInlayParameterNameHints = "all",
                includeInlayParameterNameHintsWhenArgumentMatchesName = false,
                includeInlayFunctionParameterTypeHints = true,
                includeInlayVariableTypeHints = true,
                includeInlayPropertyDeclarationTypeHints = true,
                includeInlayFunctionLikeReturnTypeHints = true,
                includeInlayEnumMemberValueHints = true,
              },
            },
            javascript = {
              inlayHints = {
                includeInlayParameterNameHints = "all",
                includeInlayParameterNameHintsWhenArgumentMatchesName = false,
                includeInlayFunctionParameterTypeHints = true,
                includeInlayVariableTypeHints = true,
                includeInlayPropertyDeclarationTypeHints = true,
                includeInlayFunctionLikeReturnTypeHints = true,
                includeInlayEnumMemberValueHints = true,
              },
            },
          },
        },
        html = {},
        cssls = {},
        jsonls = {},
        pyright = {},
      },
      setup = {},
    },
    config = function(_, opts)
      -- Setup keymaps when an LSP connects to a buffer
      vim.api.nvim_create_autocmd("LspAttach", {
        callback = function(args)
          local buffer = args.buf
          local client = vim.lsp.get_client_by_id(args.data.client_id)
          
          -- Skip attaching to servers that don't support document formatting
          if client.supports_method("textDocument/formatting") then
            vim.api.nvim_create_autocmd("BufWritePre", {
              buffer = buffer,
              callback = function()
                vim.lsp.buf.format({ async = false })
              end,
            })
          end
          
          -- LSP-aware keymaps
          local map = function(mode, lhs, rhs, desc)
            vim.keymap.set(mode, lhs, rhs, { buffer = buffer, desc = desc })
          end
          
          -- Keybindings for LSP functionality
          map("n", "gd", vim.lsp.buf.definition, "Go to Definition")
          map("n", "gr", vim.lsp.buf.references, "Go to References")
          map("n", "gD", vim.lsp.buf.declaration, "Go to Declaration")
          map("n", "gI", vim.lsp.buf.implementation, "Go to Implementation")
          map("n", "K", vim.lsp.buf.hover, "Hover Documentation")
          map("n", "<leader>ca", vim.lsp.buf.code_action, "Code Action")
          map("n", "<leader>rn", vim.lsp.buf.rename, "Rename Symbol")
          map("n", "<leader>D", vim.lsp.buf.type_definition, "Type Definition")
          map("n", "<leader>ds", require("telescope.builtin").lsp_document_symbols, "Document Symbols")
          map("n", "<leader>ws", require("telescope.builtin").lsp_workspace_symbols, "Workspace Symbols")
          map("n", "[d", vim.diagnostic.goto_prev, "Previous Diagnostic")
          map("n", "]d", vim.diagnostic.goto_next, "Next Diagnostic")
          map("n", "<leader>lf", vim.lsp.buf.format, "Format")
        end,
      })
      
      -- Configure diagnostics display
      vim.diagnostic.config(opts.diagnostics)
      
      -- Setup mason to automatically install LSP servers
      require("mason").setup({
        ui = {
          icons = {
            package_installed = "✓",
            package_pending = "➜",
            package_uninstalled = "✗",
          },
        },
      })
      
      local handlers = {
        function(server_name)
          local server = opts.servers[server_name] or {}
          -- This handles overriding only values explicitly passed
          -- by the server configuration above. Useful when disabling
          -- certain features of an LSP (like formatting)
          -- Setup capabilities with LSP
          local capabilities = vim.lsp.protocol.make_client_capabilities()
          
          -- Use cmp_nvim_lsp capabilities if available
          local status, cmp_nvim_lsp = pcall(require, "cmp_nvim_lsp")
          if status then
            capabilities = cmp_nvim_lsp.default_capabilities(capabilities)
          end
          
          server.capabilities = vim.tbl_deep_extend(
            "force",
            {},
            capabilities,
            server.capabilities or {}
          )
          require("lspconfig")[server_name].setup(server)
        end,
      }
      
      -- Add any special per-server setup here
      for server, handler in pairs(opts.setup) do
        if type(handler) == "function" then
          handlers[server] = handler
        end
      end
      
      require("mason-lspconfig").setup({
        ensure_installed = vim.tbl_keys(opts.servers),
        handlers = handlers,
      })
    end,
  },
  
  -- Mason for managing LSP servers
  {
    "williamboman/mason.nvim",
    cmd = { "Mason", "MasonInstall", "MasonUninstall", "MasonUninstallAll", "MasonLog" },
    opts = {},
  },
  
  -- Formatters and linters in Mason
  {
    "williamboman/mason-lspconfig.nvim",
    dependencies = { "williamboman/mason.nvim" },
  },
  
  -- Better UI for LSP
  {
    "j-hui/fidget.nvim",
    opts = {},
  },
}

================
File: nvim/lua/plugins/markdown-preview.lua
================
return {
  "iamcco/markdown-preview.nvim",
  cmd = { "MarkdownPreviewToggle", "MarkdownPreview", "MarkdownPreviewStop" },
  ft = { "markdown" },
  build = function() 
    vim.fn["mkdp#util#install"]() 
  end,
  init = function()
    vim.g.mkdp_filetypes = { "markdown" }
  end,
  config = function()
    -- Debug: Show preview URL in messages (important for troubleshooting)
    vim.g.mkdp_echo_preview_url = 1
    
    -- Don't try to open browser automatically - just show the URL
    vim.g.mkdp_auto_start = 0
    vim.g.mkdp_auto_close = 0
    vim.g.mkdp_open_to_the_world = 0
    
    -- Use a specific port for easier access
    vim.g.mkdp_port = '8090'
    
    -- Custom page title
    vim.g.mkdp_page_title = '${name} - Markdown Preview'
    
    -- Important: Don't use the browserfunc which might be failing
    vim.g.mkdp_browser = ''
    vim.g.mkdp_browserfunc = ''
    
    -- Add a notification to show the URL clearly
    vim.api.nvim_create_autocmd("User", {
      pattern = "MarkdownPreviewStart",
      callback = function()
        vim.notify("Markdown preview started. Open http://localhost:8090 in your browser.", vim.log.levels.INFO)
      end,
    })
  end,
  keys = {
    { "<leader>mp", "<cmd>MarkdownPreviewToggle<CR>", desc = "Toggle Markdown Preview" },
  },
}

================
File: nvim/lua/plugins/mini-icons.lua
================
return {
  {
    "echasnovski/mini.icons",
    version = false,
    config = function()
      require("mini.icons").setup()
      
      -- Optional: Use mini.icons with neo-tree
      -- This assumes you have both plugins loaded
      vim.api.nvim_create_autocmd("VimEnter", {
        callback = function()
          if package.loaded["neo-tree"] then
            -- This will run after neo-tree is loaded
            local mini_icons = require("mini.icons")
            -- You can customize which sets of icons to use with neo-tree
          end
        end,
      })
    end,
  }
}

================
File: nvim/lua/plugins/mini-move.lua
================
return {
  "echasnovski/mini.move",
  version = "*",
  config = function()
    require("mini.move").setup({
      -- Module mappings. Use `''` (empty string) to disable one.
      mappings = {
        -- Move visual selection in Visual mode using Alt/Option + wasd
        left = "<M-a>",  -- Alt + a
        right = "<M-d>", -- Alt + d
        down = "<M-s>",  -- Alt + s
        up = "<M-w>",    -- Alt + w

        -- Move current line in Normal mode using Alt/Option + wasd
        line_left = "<M-a>",  -- Alt + a
        line_right = "<M-d>", -- Alt + d
        line_down = "<M-s>",  -- Alt + s
        line_up = "<M-w>",    -- Alt + w
      },

      -- Options which control moving behavior
      options = {
        -- Automatically reindent selection during linewise vertical move
        reindent_linewise = true,
      },
    })
  end,
}

================
File: nvim/lua/plugins/neo-tree.lua
================
return {
  "nvim-neo-tree/neo-tree.nvim",
  enabled = false,
}

================
File: nvim/lua/plugins/nvim-comment.lua
================
return {
  {
    "terrortylor/nvim-comment",
    event = { "BufReadPost", "BufNewFile" },
    config = function()
      require("nvim_comment").setup({
        -- Create default mappings (gcc, gc)
        create_mappings = true,
        -- Normal mode mapping (gc + motion)
        operator_mapping = "gc",
        -- Comment empty lines
        comment_empty = false,
        -- Hook functions to run after commenting
        hook = nil,
      })
      
      -- Additional keymaps (optional)
      vim.keymap.set("n", "<leader>/", ":CommentToggle<CR>", { desc = "Toggle comment" })
      vim.keymap.set("v", "<leader>/", ":CommentToggle<CR>", { desc = "Toggle comment" })
    end,
  },
}

================
File: nvim/lua/plugins/nvim-web-devicons.lua
================
return {
  {
    "nvim-tree/nvim-web-devicons",
    lazy = false, -- Make sure it loads immediately
    config = function()
      require("nvim-web-devicons").setup({
        -- Override icon colors with your colorscheme if needed
        override_by_filename = {
          -- Add specific file overrides here if needed
        },
        -- Enable folder icons
        strict = true,
        -- Don't get overridden by devicons
        default = true,
      })
      
      -- Force reload of neo-tree to update icons
      if package.loaded["neo-tree"] then
        vim.defer_fn(function()
          vim.cmd("Neotree close")
          vim.cmd("Neotree show")
        end, 100)
      end
    end,
  },
}

================
File: nvim/lua/plugins/obsidian.lua
================
return {
  {
    "epwalsh/obsidian.nvim",
    version = "*",
    lazy = false,
    dependencies = {
      "nvim-lua/plenary.nvim",
    },
    keys = {
      { "<leader>mp", "<cmd>ObsidianPreview<CR>", desc = "Obsidian Markdown Preview" },
    },
    config = function()
      require("obsidian").setup({
        workspaces = {
          {
            name = "personal",
            path = "~/notes",
          },
        },
        new_notes_location = "current_dir",
        disable_frontmatter = false,
      })
    end,
  },
}

================
File: nvim/lua/plugins/oil.lua
================
return {
  'stevearc/oil.nvim',
  opts = {
    -- Oil will take over directory buffers (e.g. `vim .` or `:e src/`)
    default_file_explorer = true,
    -- Show file icons
    columns = {
      "icon",
    },
    -- Restore window options to previous values when leaving an oil buffer
    restore_win_options = true,
    -- Skip the confirmation popup for simple operations
    skip_confirm_for_simple_edits = true,
    -- Keymaps in oil buffer
    keymaps = {
      ["g?"] = "actions.show_help",
      ["<CR>"] = "actions.select",
      ["<C-s>"] = { "actions.select", opts = { vertical = true }},
      ["<C-h>"] = { "actions.select", opts = { horizontal = true }},
      ["<C-t>"] = { "actions.select", opts = { tab = true }},
      ["<C-p>"] = "actions.preview",
      ["<C-c>"] = "actions.close",
      ["<C-l>"] = "actions.refresh",
      ["-"] = "actions.parent",
      ["_"] = "actions.open_cwd",
      ["`"] = "actions.cd",
      ["~"] = { "actions.cd", opts = { scope = "tab" }},
      ["g."] = "actions.toggle_hidden",
    },
    -- Set to false to disable all of the above keymaps
    use_default_keymaps = false,
    view_options = {
      -- Show files and directories that start with "."
      show_hidden = false,
    },
  },
  -- Optional dependencies
  dependencies = { "nvim-tree/nvim-web-devicons" },
}

================
File: nvim/lua/plugins/plugins.lua
================
return {
  -- Markdown preview
  {
    "iamcco/markdown-preview.nvim",
    cmd = { "MarkdownPreviewToggle", "MarkdownPreview", "MarkdownPreviewStop" },
    ft = { "markdown" },
    build = function() vim.fn["mkdp#util#install"]() end,  -- Recommended build method
    config = function()
      -- Debug: Show preview URL in messages
      vim.g.mkdp_echo_preview_url = 1
      
      -- Set filetypes
      vim.g.mkdp_filetypes = { "markdown" }
      
      -- Use macOS open command via custom function
      vim.g.mkdp_browserfunc = function(url)
        vim.notify("Markdown preview URL: " .. url)
        vim.fn.system({"open", url})  -- Uses macOS default browser
      end
      
      -- Custom page title
      vim.g.mkdp_page_title = '${name} - Markdown Preview'
      
      -- Port settings (fix for macOS)
      vim.g.mkdp_port = '8090'
      
      -- Refresh on events
      vim.g.mkdp_refresh_slow = 0
      vim.g.mkdp_preview_options = {
        sync_scroll_type = 'middle',
      }
    end,
    keys = {
      { "<leader>mp", "<cmd>MarkdownPreviewToggle<CR>", desc = "Toggle Markdown Preview" },
    },
  },
  
  -- Surround plugin (similar to vim-surround)
  {
    "kylechui/nvim-surround",
    version = "*", -- Use for stability; omit to use `main` branch for the latest features
    event = "VeryLazy",
    config = function()
      require("nvim-surround").setup({
        -- Configuration here, or leave empty to use defaults
      })
    end
  },
  
}

================
File: nvim/lua/plugins/telescope.lua
================
return {
  {
    "nvim-telescope/telescope.nvim",
    dependencies = {
      "nvim-lua/plenary.nvim",
      { "nvim-telescope/telescope-fzf-native.nvim", build = "make" },
    },
    config = function()
      require("telescope").setup({
        defaults = {
          vimgrep_arguments = {
            "rg",
            "--color=never",
            "--no-heading",
            "--with-filename",
            "--line-number",
            "--column",
            "--smart-case",
          },
          file_ignore_patterns = {
            "%.git/.*",
            "node_modules/.*",
          },
          path_display = { "truncate" },
          -- Simplified pattern to avoid NFA regexp errors
          generic_sorter = require("telescope.sorters").get_generic_fuzzy_sorter(),
          file_sorter = require("telescope.sorters").get_fuzzy_file(),
          grep_previewer = require("telescope.previewers").vim_buffer_vimgrep.new,
          qflist_previewer = require("telescope.previewers").vim_buffer_qflist.new,
        },
      })
      -- Load extensions
      require("telescope").load_extension("fzf")
    end,
  },
}

================
File: nvim/lua/plugins/todo-comments.lua
================
return {
  "folke/todo-comments.nvim",
  dependencies = { "nvim-lua/plenary.nvim" },
  cmd = { "TodoTrouble", "TodoTelescope", "TodoLocList", "TodoQuickFix" },
  event = { "BufReadPost", "BufNewFile" },
  config = function()
    require("todo-comments").setup({
      signs = true,
      sign_priority = 8,
      keywords = {
        FIX = {
          icon = " ",
          color = "error",
          alt = { "FIXME", "BUG", "FIXIT", "ISSUE" },
        },
        TODO = { icon = " ", color = "info" },
        HACK = { icon = " ", color = "warning" },
        WARN = { icon = " ", color = "warning", alt = { "WARNING", "XXX" } },
        PERF = { icon = " ", alt = { "OPTIM", "PERFORMANCE", "OPTIMIZE" } },
        NOTE = { icon = " ", color = "hint", alt = { "INFO" } },
        TEST = { icon = "⏲ ", color = "test", alt = { "TESTING", "PASSED", "FAILED" } },
      },
      gui_style = {
        fg = "NONE",
        bg = "BOLD",
      },
      merge_keywords = true,
      highlight = {
        multiline = true,
        multiline_pattern = "^.",
        multiline_context = 10,
        before = "",
        keyword = "wide",
        after = "fg",
        pattern = [[.*<(KEYWORDS)]], -- Simplified pattern to avoid NFA regexp errors
        comments_only = true,
        max_line_len = 400,
        exclude = {},
      },
      colors = {
        error = { "DiagnosticError", "ErrorMsg", "#DC2626" },
        warning = { "DiagnosticWarn", "WarningMsg", "#FBBF24" },
        info = { "DiagnosticInfo", "#2563EB" },
        hint = { "DiagnosticHint", "#10B981" },
        default = { "Identifier", "#7C3AED" },
        test = { "Identifier", "#FF00FF" },
      },
      search = {
        command = "rg",
        args = {
          "--color=never",
          "--no-heading",
          "--with-filename",
          "--line-number",
          "--column",
        },
        -- Using a very simple pattern to avoid regexp errors
        pattern = [[(\b|^)(KEYWORDS)(\b|$)]], -- More robust pattern that avoids quantifier issues
      },
    })
  end,
  keys = {
    { "<leader>ft", "<cmd>TodoTelescope<cr>", desc = "Find TODOs" },
    { "<leader>fT", "<cmd>TodoTrouble<cr>",   desc = "TODOs in Trouble" },
    { "<leader>fq", "<cmd>TodoQuickFix<cr>",  desc = "TODOs in QuickFix" },
    {
      "]t",
      function()
        require("todo-comments").jump_next()
      end,
      desc = "Next todo comment",
    },
    {
      "[t",
      function()
        require("todo-comments").jump_prev()
      end,
      desc = "Previous todo comment",
    },
  },
}

================
File: nvim/lua/plugins/treesitter.lua
================
return {
  {
    "nvim-treesitter/nvim-treesitter",
    opts = {
      ensure_installed = {
        "bash",
        "html",
        "javascript",
        "json",
        "lua",
        "markdown",
        "markdown_inline",
        "python",
        "query",
        "regex",
        "tsx",
        "typescript",
        "vim",
        "yaml",
        "xml",
        "json",
      },
      -- Auto install above language parsers
      auto_install = true,

      highlight = {
        enable = true,
        additional_vim_regex_highlighting = false,
      },
      indent = { enable = true },
      context_commentstring = { enable = true, enable_autocmd = false },
      incremental_selection = {
        enable = true,
        keymaps = {
          init_selection = "<C-space>",
          node_incremental = "<C-space>",
          scope_incremental = "<nop>",
          node_decremental = "<bs>",
        },
      },
    },
  },
}

================
File: nvim/test/mini-move-test.txt
================
This is line 1
This is line 2
This is line 3
This is line 4
This is line 5

================
File: nvim/init.lua
================
-- bootstrap lazy.nvim, LazyVim and your plugins
-- Set high-priority options early (like PATH modification)
local mason_bin = vim.fn.stdpath("data") .. "/mason/bin"
vim.env.PATH = mason_bin .. ":" .. vim.env.PATH

-- Set up completion options before loading plugins
vim.opt.completeopt = "menu,menuone,noselect"

-- Global flag to prevent duplicate completion setup
_G.cmp_setup_complete = false

-- Disable lazy-loading for nvim-cmp to ensure it loads first
vim.g.cmp_lazy_loaded = false

-- Global protection for cmp sources
for _, source in ipairs({ "buffer", "path", "nvim_lsp" }) do
  package.preload["cmp_" .. source] = function()
    local cmp_ok, cmp = pcall(require, "cmp")
    if not cmp_ok then
      error("cmp not loaded when requiring cmp_" .. source)
    end
    return require("cmp_" .. source .. ".core")
  end
end

-- Bootstrap lazy.nvim
require("config.lazy")

-- Disable spell check globally except for markdown and text files
vim.opt.spell = false               -- Disable spell check globally first
vim.api.nvim_create_autocmd("FileType", {
  pattern = { "markdown", "text" }, -- Only enable for these file types
  callback = function()
    vim.opt_local.spell = true
  end,
})

-- enable cursorline
vim.opt.cursorline = true

-- set the cursor to a thin vertical line

vim.opt.guicursor = "n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20"

================
File: nvim/lazy-lock.json
================
{
  "LazyVim": { "branch": "main", "commit": "3f034d0a7f58031123300309f2efd3bb0356ee21" },
  "LuaSnip": { "branch": "master", "commit": "c9b9a22904c97d0eb69ccb9bab76037838326817" },
  "blink.cmp": { "branch": "main", "commit": "dcda20d3aa345025699a920c45b0a0603551f41d" },
  "bufferline.nvim": { "branch": "main", "commit": "655133c3b4c3e5e05ec549b9f8cc2894ac6f51b3" },
  "catppuccin": { "branch": "main", "commit": "4bb938bbba41d306db18bf0eb0633a5f28fd7ba0" },
  "conform.nvim": { "branch": "master", "commit": "db8a4a9edb217067b1d7a2e0362c74bfe9cc944d" },
  "fidget.nvim": { "branch": "main", "commit": "d9ba6b7bfe29b3119a610892af67602641da778e" },
  "flash.nvim": { "branch": "main", "commit": "3c942666f115e2811e959eabbdd361a025db8b63" },
  "friendly-snippets": { "branch": "main", "commit": "efff286dd74c22f731cdec26a70b46e5b203c619" },
  "gitsigns.nvim": { "branch": "main", "commit": "4c40357994f386e72be92a46f41fc1664c84c87d" },
  "grug-far.nvim": { "branch": "main", "commit": "3a370c3a47b579f67a365c16d7bb740fa9d8eb7d" },
  "lazy.nvim": { "branch": "main", "commit": "6c3bda4aca61a13a9c63f1c1d1b16b9d3be90d7a" },
  "lazydev.nvim": { "branch": "main", "commit": "2367a6c0a01eb9edb0464731cc0fb61ed9ab9d2c" },
  "lualine.nvim": { "branch": "master", "commit": "f4f791f67e70d378a754d02da068231d2352e5bc" },
  "markdown-preview.nvim": { "branch": "master", "commit": "a923f5fc5ba36a3b17e289dc35dc17f66d0548ee" },
  "mason-lspconfig.nvim": { "branch": "main", "commit": "1a31f824b9cd5bc6f342fc29e9a53b60d74af245" },
  "mason.nvim": { "branch": "main", "commit": "fc98833b6da5de5a9c5b1446ac541577059555be" },
  "mini.ai": { "branch": "main", "commit": "6e01c0e5a15554852546fac9853960780ac52ed4" },
  "mini.icons": { "branch": "main", "commit": "ec61af6e606fc89ee3b1d8f2f20166a3ca917a36" },
  "mini.move": { "branch": "main", "commit": "4caa1c212f5ca3d1633d21cfb184808090ed74b1" },
  "mini.pairs": { "branch": "main", "commit": "1a3e73649c0eaef2f6c48ce1e761c6f0a7c11918" },
  "neo-tree.nvim": { "branch": "v3.x", "commit": "e96fd85bf18bc345dab332b345098fa5460dffac" },
  "noice.nvim": { "branch": "main", "commit": "0427460c2d7f673ad60eb02b35f5e9926cf67c59" },
  "nui.nvim": { "branch": "main", "commit": "8d3bce9764e627b62b07424e0df77f680d47ffdb" },
  "nvim-comment": { "branch": "main", "commit": "e9ac16ab056695cad6461173693069ec070d2b23" },
  "nvim-lint": { "branch": "master", "commit": "6e9dd545a1af204c4022a8fcd99727ea41ffdcc8" },
  "nvim-lspconfig": { "branch": "master", "commit": "fd26f8626c03b424f7140d454031d1dcb8d23513" },
  "nvim-surround": { "branch": "main", "commit": "ae298105122c87bbe0a36b1ad20b06d417c0433e" },
  "nvim-treesitter": { "branch": "master", "commit": "ffd284c4706d91c0d94916995f584b22ce89afcb" },
  "nvim-treesitter-textobjects": { "branch": "master", "commit": "143856b1cee509a190cc8c17ddb0638002171235" },
  "nvim-ts-autotag": { "branch": "main", "commit": "a1d526af391f6aebb25a8795cbc05351ed3620b5" },
  "nvim-web-devicons": { "branch": "master", "commit": "ab4cfee554e501f497bce0856788d43cf2eb93d7" },
  "obsidian.nvim": { "branch": "main", "commit": "ae1f76a75c7ce36866e1d9342a8f6f5b9c2caf9b" },
  "oil.nvim": { "branch": "master", "commit": "548587d68b55e632d8a69c92cefd981f360634fa" },
  "persistence.nvim": { "branch": "main", "commit": "166a79a55bfa7a4db3e26fc031b4d92af71d0b51" },
  "plenary.nvim": { "branch": "master", "commit": "857c5ac632080dba10aae49dba902ce3abf91b35" },
  "snacks.nvim": { "branch": "main", "commit": "bc0630e43be5699bb94dadc302c0d21615421d93" },
  "telescope-fzf-native.nvim": { "branch": "main", "commit": "2a5ceff981501cff8f46871d5402cd3378a8ab6a" },
  "telescope.nvim": { "branch": "master", "commit": "814f102cd1da3dc78c7d2f20f2ef3ed3cdf0e6e4" },
  "todo-comments.nvim": { "branch": "main", "commit": "304a8d204ee787d2544d8bc23cd38d2f929e7cc5" },
  "tokyonight.nvim": { "branch": "main", "commit": "057ef5d260c1931f1dffd0f052c685dcd14100a3" },
  "trouble.nvim": { "branch": "main", "commit": "85bedb7eb7fa331a2ccbecb9202d8abba64d37b3" },
  "ts-comments.nvim": { "branch": "main", "commit": "1bd9d0ba1d8b336c3db50692ffd0955fe1bb9f0c" },
  "which-key.nvim": { "branch": "main", "commit": "370ec46f710e058c9c1646273e6b225acf47cbed" }
}

================
File: nvim/lazyvim.json
================
{
  "extras": [

  ],
  "install_version": 8,
  "news": {
    "NEWS.md": "10960"
  },
  "version": 8
}

================
File: nvim/LICENSE
================
Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

================
File: nvim/package.json
================
{
  "dependencies": {
    "@anthropic-ai/sdk": "^0.37.0"
  }
}

================
File: nvim/README.md
================
# 💤 LazyVim

A starter template for [LazyVim](https://github.com/LazyVim/LazyVim).
Refer to the [documentation](https://lazyvim.github.io/installation) to get started.

# TITLE
dfasdf

```python
def a() -> str:
  return "template" ```
Keep adding stuff

================
File: nvim/stylua.toml
================
indent_type = "Spaces"
indent_width = 2
column_width = 120

================
File: tmux/.tmux.conf
================
set -g prefix ^a

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'catppuccin/tmux'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'

# Keep the same directory when creating new windows/panes
bind c new-window -c "#{pane_current_path}"
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"

# setw -g mode-keys vi
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind - break-pane -t :

# Option+Tab to switch windows (Mac-specific)
bind-key -n M-Tab next-window

# Cross-platform window navigation (works on Windows too)
bind-key -n C-Left previous-window
bind-key -n C-Right next-window
bind-key -n C-p previous-window

# # Bind Alt + Right to forward-word
# bind-key -n M-Right send-keys "Esc f"
#
# # Bind Alt + Left to backward-word
# bind-key -n M-Left send-keys "Esc b"

set -g status-position top
set -g base-index 1
setw -g pane-base-index 1

set -g @catppuccin_window_left_separator ""
set -g @catppuccin_window_right_separator " "
set -g @catppuccin_window_middle_separator " █"
set -g @catppuccin_window_number_position "right"
set -g @catppuccin_window_default_fill "number"
set -g @catppuccin_window_default_text "#W"
set -g @catppuccin_window_current_fill "number"
set -g @catppuccin_window_current_text "#W#{?window_zoomed_flag,(🔎),}"
set -g @catppuccin_status_modules_right "directory"
set -g @catppuccin_status_modules_left "session"
set -g @catppuccin_status_left_separator  " "
set -g @catppuccin_status_right_separator " "
set -g @catppuccin_status_right_separator_inverse "no"
set -g @catppuccin_status_fill "icon"
set -g @catppuccin_status_connect_separator "no"
set -g @catppuccin_directory_text "#{b:pane_current_path}"

run '~/.tmux/plugins/tpm/tpm'

================
File: tmux/tmux.conf
================
set -g prefix C-Space

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'catppuccin/tmux'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'

# Keep the same directory when creating new windows/panes
bind c new-window -c "#{pane_current_path}"
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"

# setw -g mode-keys vi
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind - break-pane -t :

# Option+Tab to switch windows (Mac-specific)
bind-key -n M-Tab next-window

# Cross-platform window navigation (works on Windows too)
bind-key -n C-Left previous-window
bind-key -n C-Right next-window
bind-key -n C-p previous-window

# # Bind Alt + Right to forward-word
# bind-key -n M-Right send-keys "Esc f"
#
# # Bind Alt + Left to backward-word
# bind-key -n M-Left send-keys "Esc b"

set -g status-position top
set -g base-index 1
setw -g pane-base-index 1

set -g @catppuccin_window_left_separator ""
set -g @catppuccin_window_right_separator " "
set -g @catppuccin_window_middle_separator " █"
set -g @catppuccin_window_number_position "right"
set -g @catppuccin_window_default_fill "number"
set -g @catppuccin_window_default_text "#W"
set -g @catppuccin_window_current_fill "number"
set -g @catppuccin_window_current_text "#W#{?window_zoomed_flag,(🔎),}"
set -g @catppuccin_status_modules_right "directory"
set -g @catppuccin_status_modules_left "session"
set -g @catppuccin_status_left_separator  " "
set -g @catppuccin_status_right_separator " "
set -g @catppuccin_status_right_separator_inverse "no"
set -g @catppuccin_status_fill "icon"
set -g @catppuccin_status_connect_separator "no"
set -g @catppuccin_directory_text "#{b:pane_current_path}"

run '~/.tmux/plugins/tpm/tpm'

================
File: yazi/flavors/catppuccin-mocha.yazi/flavor.toml
================
# vim:fileencoding=utf-8:foldmethod=marker

# : Manager {{{

[manager]
cwd = { fg = "#94e2d5" }

# Hovered
hovered         = { reversed = true }
preview_hovered = { underline = true }

# Find
find_keyword  = { fg = "#f9e2af", bold = true, italic = true, underline = true }
find_position = { fg = "#f5c2e7", bg = "reset", bold = true, italic = true }

# Marker
marker_copied   = { fg = "#a6e3a1", bg = "#a6e3a1" }
marker_cut      = { fg = "#f38ba8", bg = "#f38ba8" }
marker_marked   = { fg = "#94e2d5", bg = "#94e2d5" }
marker_selected = { fg = "#f9e2af", bg = "#f9e2af" }

# Tab
tab_active   = { reversed = true }
tab_inactive = {}
tab_width    = 1

# Count
count_copied   = { fg = "#1e1e2e", bg = "#a6e3a1" }
count_cut      = { fg = "#1e1e2e", bg = "#f38ba8" }
count_selected = { fg = "#1e1e2e", bg = "#f9e2af" }

# Border
border_symbol = "│"
border_style  = { fg = "#7f849c" }

# : }}}


# : Mode {{{

[mode]

normal_main = { fg = "#1e1e2e", bg = "#89b4fa", bold = true }
normal_alt  = { fg = "#89b4fa", bg = "#313244" }

# Select mode
select_main = { fg = "#1e1e2e", bg = "#94e2d5", bold = true }
select_alt  = { fg = "#94e2d5", bg = "#313244" }

# Unset mode
unset_main = { fg = "#1e1e2e", bg = "#f2cdcd", bold = true }
unset_alt  = { fg = "#f2cdcd", bg = "#313244" }

# : }}}


# : Status bar {{{

[status]
separator_open  = ""
separator_close = ""

# Progress
progress_label  = { fg = "#ffffff", bold = true }
progress_normal = { fg = "#89b4fa", bg = "#45475a" }
progress_error  = { fg = "#f38ba8", bg = "#45475a" }

# Permissions
perm_sep   = { fg = "#7f849c" }
perm_type  = { fg = "#89b4fa" }
perm_read  = { fg = "#f9e2af" }
perm_write = { fg = "#f38ba8" }
perm_exec  = { fg = "#a6e3a1" }

# : }}}


# : Pick {{{

[pick]
border   = { fg = "#89b4fa" }
active   = { fg = "#f5c2e7", bold = true }
inactive = {}

# : }}}


# : Input {{{

[input]
border   = { fg = "#89b4fa" }
title    = {}
value    = {}
selected = { reversed = true }

# : }}}


# : Completion {{{

[completion]
border = { fg = "#89b4fa" }

# : }}}


# : Tasks {{{

[tasks]
border  = { fg = "#89b4fa" }
title   = {}
hovered = { fg = "#f5c2e7", underline = true }

# : }}}


# : Which {{{

[which]
mask            = { bg = "#313244" }
cand            = { fg = "#94e2d5" }
rest            = { fg = "#9399b2" }
desc            = { fg = "#f5c2e7" }
separator       = "  "
separator_style = { fg = "#585b70" }

# : }}}


# : Help {{{

[help]
on      = { fg = "#94e2d5" }
run     = { fg = "#f5c2e7" }
hovered = { reversed = true, bold = true }
footer  = { fg = "#313244", bg = "#cdd6f4" }

# : }}}


# : Notify {{{

[notify]
title_info  = { fg = "#a6e3a1" }
title_warn  = { fg = "#f9e2af" }
title_error = { fg = "#f38ba8" }

# : }}}


# : File-specific styles {{{

[filetype]

rules = [
	# Images
	{ mime = "image/*", fg = "#94e2d5" },

	# Media
	{ mime = "{audio,video}/*", fg = "#f9e2af" },

	# Archives
	{ mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", fg = "#f5c2e7" },

	# Documents
	{ mime = "application/{pdf,doc,rtf}", fg = "#a6e3a1" },

	# Fallback
	{ name = "*", fg = "#cdd6f4" },
	{ name = "*/", fg = "#89b4fa" }
]

# : }}}

================
File: yazi/flavors/catppuccin-mocha.yazi/LICENSE
================
MIT License

Copyright (c) 2023 yazi-rs

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: yazi/flavors/catppuccin-mocha.yazi/LICENSE-tmtheme
================
MIT License

Copyright (c) 2021 Catppuccin

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: yazi/flavors/catppuccin-mocha.yazi/README.md
================
<div align="center">
  <img src="https://github.com/sxyazi/yazi/blob/main/assets/logo.png?raw=true" alt="Yazi logo" width="20%">
</div>

<h3 align="center">
	Catppuccin Mocha Flavor for <a href="https://github.com/sxyazi/yazi">Yazi</a>
</h3>

## 👀 Preview

<img src="preview.png" width="600" />

## 🎨 Installation

```sh
ya pack -a yazi-rs/flavors:catppuccin-mocha
```

## ⚙️ Usage

Set the content of your `theme.toml` to enable it as your _dark_ flavor:

```toml
[flavor]
dark = "catppuccin-mocha"
```

Make sure your `theme.toml` doesn't contain anything other than `[flavor]`, unless you want to override certain styles of this flavor.

See the [Yazi flavor documentation](https://yazi-rs.github.io/docs/flavors/overview) for more details.

## 📜 License

The flavor is MIT-licensed, and the included tmTheme is also MIT-licensed.

Check the [LICENSE](LICENSE) and [LICENSE-tmtheme](LICENSE-tmtheme) file for more details.

================
File: yazi/flavors/catppuccin-mocha.yazi/tmtheme.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>name</key>
    <string>Catppuccin Mocha</string>
    <key>semanticClass</key>
    <string>theme.dark.catppuccin-mocha</string>
    <key>uuid</key>
    <string>627ce890-fabb-4d39-9819-7be71f4bdca7</string>
    <key>author</key>
    <string>Catppuccin Org</string>
    <key>colorSpaceName</key>
    <string>sRGB</string>
    <key>settings</key>
    <array>
      <dict>
        <key>settings</key>
        <dict>
          <key>background</key>
          <string>#1e1e2e</string>
          <key>foreground</key>
          <string>#cdd6f4</string>
          <key>caret</key>
          <string>#f5e0dc</string>
          <key>lineHighlight</key>
          <string>#313244</string>
          <key>misspelling</key>
          <string>#f38ba8</string>
          <key>accent</key>
          <string>#cba6f7</string>
          <key>selection</key>
          <string>#9399b240</string>
          <key>activeGuide</key>
          <string>#45475a</string>
          <key>findHighlight</key>
          <string>#3e5767</string>
          <key>gutterForeground</key>
          <string>#7f849c</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Basic text &amp; variable names (incl. leading punctuation)</string>
        <key>scope</key>
        <string>text, source, variable.other.readwrite, punctuation.definition.variable</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cdd6f4</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Parentheses, Brackets, Braces</string>
        <key>scope</key>
        <string>punctuation</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#9399b2</string>
          <key>fontStyle</key>
          <string/>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Comments</string>
        <key>scope</key>
        <string>comment, punctuation.definition.comment</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#6c7086</string>
          <key>fontStyle</key>
          <string>italic</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>string, punctuation.definition.string</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#a6e3a1</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>constant.character.escape</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f5c2e7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Booleans, constants, numbers</string>
        <key>scope</key>
        <string>constant.numeric, variable.other.constant, entity.name.constant, constant.language.boolean, constant.language.false, constant.language.true, keyword.other.unit.user-defined, keyword.other.unit.suffix.floating-point</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#fab387</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>keyword, keyword.operator.word, keyword.operator.new, variable.language.super, support.type.primitive, storage.type, storage.modifier, punctuation.definition.keyword</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cba6f7</string>
          <key>fontStyle</key>
          <string/>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>entity.name.tag.documentation</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cba6f7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Punctuation</string>
        <key>scope</key>
        <string>keyword.operator, punctuation.accessor, punctuation.definition.generic, meta.function.closure punctuation.section.parameters, punctuation.definition.tag, punctuation.separator.key-value</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#94e2d5</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>entity.name.function, meta.function-call.method, support.function, support.function.misc, variable.function</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89b4fa</string>
          <key>fontStyle</key>
          <string>italic</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Classes</string>
        <key>scope</key>
        <string>entity.name.class, entity.other.inherited-class, support.class, meta.function-call.constructor, entity.name.struct</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f9e2af</string>
          <key>fontStyle</key>
          <string>italic</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Enum</string>
        <key>scope</key>
        <string>entity.name.enum</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f9e2af</string>
          <key>fontStyle</key>
          <string>italic</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Enum member</string>
        <key>scope</key>
        <string>meta.enum variable.other.readwrite, variable.other.enummember</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#94e2d5</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Object properties</string>
        <key>scope</key>
        <string>meta.property.object</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#94e2d5</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Types</string>
        <key>scope</key>
        <string>meta.type, meta.type-alias, support.type, entity.name.type</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f9e2af</string>
          <key>fontStyle</key>
          <string>italic</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Decorators</string>
        <key>scope</key>
        <string>meta.annotation variable.function, meta.annotation variable.annotation.function, meta.annotation punctuation.definition.annotation, meta.decorator, punctuation.decorator</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#fab387</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>variable.parameter, meta.function.parameters</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#eba0ac</string>
          <key>fontStyle</key>
          <string>italic</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Built-ins</string>
        <key>scope</key>
        <string>constant.language, support.function.builtin</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f38ba8</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>entity.other.attribute-name.documentation</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f38ba8</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Preprocessor directives</string>
        <key>scope</key>
        <string>keyword.control.directive, punctuation.definition.directive</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f9e2af</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Type parameters</string>
        <key>scope</key>
        <string>punctuation.definition.typeparameters</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89dceb</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Namespaces</string>
        <key>scope</key>
        <string>entity.name.namespace</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f9e2af</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Property names (left hand assignments in json/yaml/css)</string>
        <key>scope</key>
        <string>support.type.property-name.css</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89b4fa</string>
          <key>fontStyle</key>
          <string/>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>This/Self keyword</string>
        <key>scope</key>
        <string>variable.language.this, variable.language.this punctuation.definition.variable</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f38ba8</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Object properties</string>
        <key>scope</key>
        <string>variable.object.property</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cdd6f4</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>String template interpolation</string>
        <key>scope</key>
        <string>string.template variable, string variable</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cdd6f4</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>`new` as bold</string>
        <key>scope</key>
        <string>keyword.operator.new</string>
        <key>settings</key>
        <dict>
          <key>fontStyle</key>
          <string>bold</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>C++ extern keyword</string>
        <key>scope</key>
        <string>storage.modifier.specifier.extern.cpp</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cba6f7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>C++ scope resolution</string>
        <key>scope</key>
        <string>entity.name.scope-resolution.template.call.cpp, entity.name.scope-resolution.parameter.cpp, entity.name.scope-resolution.cpp, entity.name.scope-resolution.function.definition.cpp</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f9e2af</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>C++ doc keywords</string>
        <key>scope</key>
        <string>storage.type.class.doxygen</string>
        <key>settings</key>
        <dict>
          <key>fontStyle</key>
          <string/>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>C++ operators</string>
        <key>scope</key>
        <string>storage.modifier.reference.cpp</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#94e2d5</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>C# Interpolated Strings</string>
        <key>scope</key>
        <string>meta.interpolation.cs</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cdd6f4</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>C# xml-style docs</string>
        <key>scope</key>
        <string>comment.block.documentation.cs</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cdd6f4</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Classes, reflecting the className color in JSX</string>
        <key>scope</key>
        <string>source.css entity.other.attribute-name.class.css, entity.other.attribute-name.parent-selector.css punctuation.definition.entity.css</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f9e2af</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Operators</string>
        <key>scope</key>
        <string>punctuation.separator.operator.css</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#94e2d5</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Pseudo classes</string>
        <key>scope</key>
        <string>source.css entity.other.attribute-name.pseudo-class</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#94e2d5</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>source.css constant.other.unicode-range</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#fab387</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>source.css variable.parameter.url</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#a6e3a1</string>
          <key>fontStyle</key>
          <string/>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>CSS vendored property names</string>
        <key>scope</key>
        <string>support.type.vendored.property-name</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89dceb</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Less/SCSS right-hand variables (@/$-prefixed)</string>
        <key>scope</key>
        <string>source.css meta.property-value variable, source.css meta.property-value variable.other.less, source.css meta.property-value variable.other.less punctuation.definition.variable.less, meta.definition.variable.scss</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#eba0ac</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>CSS variables (--prefixed)</string>
        <key>scope</key>
        <string>source.css meta.property-list variable, meta.property-list variable.other.less, meta.property-list variable.other.less punctuation.definition.variable.less</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89b4fa</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>CSS Percentage values, styled the same as numbers</string>
        <key>scope</key>
        <string>keyword.other.unit.percentage.css</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#fab387</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>CSS Attribute selectors, styled the same as strings</string>
        <key>scope</key>
        <string>source.css meta.attribute-selector</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#a6e3a1</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>JSON/YAML keys, other left-hand assignments</string>
        <key>scope</key>
        <string>keyword.other.definition.ini, punctuation.support.type.property-name.json, support.type.property-name.json, punctuation.support.type.property-name.toml, support.type.property-name.toml, entity.name.tag.yaml, punctuation.support.type.property-name.yaml, support.type.property-name.yaml</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89b4fa</string>
          <key>fontStyle</key>
          <string/>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>JSON/YAML constants</string>
        <key>scope</key>
        <string>constant.language.json, constant.language.yaml</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#fab387</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>YAML anchors</string>
        <key>scope</key>
        <string>entity.name.type.anchor.yaml, variable.other.alias.yaml</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f9e2af</string>
          <key>fontStyle</key>
          <string/>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>TOML tables / ini groups</string>
        <key>scope</key>
        <string>support.type.property-name.table, entity.name.section.group-title.ini</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f9e2af</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>TOML dates</string>
        <key>scope</key>
        <string>constant.other.time.datetime.offset.toml</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f5c2e7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>YAML anchor puctuation</string>
        <key>scope</key>
        <string>punctuation.definition.anchor.yaml, punctuation.definition.alias.yaml</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f5c2e7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>YAML triple dashes</string>
        <key>scope</key>
        <string>entity.other.document.begin.yaml</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f5c2e7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Markup Diff</string>
        <key>scope</key>
        <string>markup.changed.diff</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#fab387</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Diff</string>
        <key>scope</key>
        <string>meta.diff.header.from-file, meta.diff.header.to-file, punctuation.definition.from-file.diff, punctuation.definition.to-file.diff</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89b4fa</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Diff Inserted</string>
        <key>scope</key>
        <string>markup.inserted.diff</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#a6e3a1</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Diff Deleted</string>
        <key>scope</key>
        <string>markup.deleted.diff</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f38ba8</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>dotenv left-hand side assignments</string>
        <key>scope</key>
        <string>variable.other.env</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89b4fa</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>dotenv reference to existing env variable</string>
        <key>scope</key>
        <string>string.quoted variable.other.env</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cdd6f4</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>GDScript functions</string>
        <key>scope</key>
        <string>support.function.builtin.gdscript</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89b4fa</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>GDScript constants</string>
        <key>scope</key>
        <string>constant.language.gdscript</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#fab387</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Comment keywords</string>
        <key>scope</key>
        <string>comment meta.annotation.go</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#eba0ac</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>go:embed, go:build, etc.</string>
        <key>scope</key>
        <string>comment meta.annotation.parameters.go</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#fab387</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Go constants (nil, true, false)</string>
        <key>scope</key>
        <string>constant.language.go</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#fab387</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>GraphQL variables</string>
        <key>scope</key>
        <string>variable.graphql</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cdd6f4</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>GraphQL aliases</string>
        <key>scope</key>
        <string>string.unquoted.alias.graphql</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f2cdcd</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>GraphQL enum members</string>
        <key>scope</key>
        <string>constant.character.enum.graphql</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#94e2d5</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>GraphQL field in types</string>
        <key>scope</key>
        <string>meta.objectvalues.graphql constant.object.key.graphql string.unquoted.graphql</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f2cdcd</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>HTML/XML DOCTYPE as keyword</string>
        <key>scope</key>
        <string>keyword.other.doctype, meta.tag.sgml.doctype punctuation.definition.tag, meta.tag.metadata.doctype entity.name.tag, meta.tag.metadata.doctype punctuation.definition.tag</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cba6f7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>HTML/XML-like &lt;tags/&gt;</string>
        <key>scope</key>
        <string>entity.name.tag</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89b4fa</string>
          <key>fontStyle</key>
          <string/>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Special characters like &amp;amp;</string>
        <key>scope</key>
        <string>text.html constant.character.entity, text.html constant.character.entity punctuation, constant.character.entity.xml, constant.character.entity.xml punctuation, constant.character.entity.js.jsx, constant.charactger.entity.js.jsx punctuation, constant.character.entity.tsx, constant.character.entity.tsx punctuation</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f38ba8</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>HTML/XML tag attribute values</string>
        <key>scope</key>
        <string>entity.other.attribute-name</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f9e2af</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Components</string>
        <key>scope</key>
        <string>support.class.component, support.class.component.jsx, support.class.component.tsx, support.class.component.vue</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f5c2e7</string>
          <key>fontStyle</key>
          <string/>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Annotations</string>
        <key>scope</key>
        <string>punctuation.definition.annotation, storage.type.annotation</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#fab387</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Java enums</string>
        <key>scope</key>
        <string>constant.other.enum.java</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#94e2d5</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Java imports</string>
        <key>scope</key>
        <string>storage.modifier.import.java</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cdd6f4</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Javadoc</string>
        <key>scope</key>
        <string>comment.block.javadoc.java keyword.other.documentation.javadoc.java</string>
        <key>settings</key>
        <dict>
          <key>fontStyle</key>
          <string/>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Exported Variable</string>
        <key>scope</key>
        <string>meta.export variable.other.readwrite.js</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#eba0ac</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>JS/TS constants &amp; properties</string>
        <key>scope</key>
        <string>variable.other.constant.js, variable.other.constant.ts, variable.other.property.js, variable.other.property.ts</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cdd6f4</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>JSDoc; these are mainly params, so styled as such</string>
        <key>scope</key>
        <string>variable.other.jsdoc, comment.block.documentation variable.other</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#eba0ac</string>
          <key>fontStyle</key>
          <string/>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>JSDoc keywords</string>
        <key>scope</key>
        <string>storage.type.class.jsdoc</string>
        <key>settings</key>
        <dict>
          <key>fontStyle</key>
          <string/>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>support.type.object.console.js</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cdd6f4</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Node constants as keywords (module, etc.)</string>
        <key>scope</key>
        <string>support.constant.node, support.type.object.module.js</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cba6f7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>implements as keyword</string>
        <key>scope</key>
        <string>storage.modifier.implements</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cba6f7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Builtin types</string>
        <key>scope</key>
        <string>constant.language.null.js, constant.language.null.ts, constant.language.undefined.js, constant.language.undefined.ts, support.type.builtin.ts</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cba6f7</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>variable.parameter.generic</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f9e2af</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Arrow functions</string>
        <key>scope</key>
        <string>keyword.declaration.function.arrow.js, storage.type.function.arrow.ts</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#94e2d5</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Decorator punctuations (decorators inherit from blue functions, instead of styleguide peach)</string>
        <key>scope</key>
        <string>punctuation.decorator.ts</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89b4fa</string>
          <key>fontStyle</key>
          <string>italic</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Extra JS/TS keywords</string>
        <key>scope</key>
        <string>keyword.operator.expression.in.js, keyword.operator.expression.in.ts, keyword.operator.expression.infer.ts, keyword.operator.expression.instanceof.js, keyword.operator.expression.instanceof.ts, keyword.operator.expression.is, keyword.operator.expression.keyof.ts, keyword.operator.expression.of.js, keyword.operator.expression.of.ts, keyword.operator.expression.typeof.ts</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cba6f7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Julia macros</string>
        <key>scope</key>
        <string>support.function.macro.julia</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#94e2d5</string>
          <key>fontStyle</key>
          <string>italic</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Julia language constants (true, false)</string>
        <key>scope</key>
        <string>constant.language.julia</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#fab387</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Julia other constants (these seem to be arguments inside arrays)</string>
        <key>scope</key>
        <string>constant.other.symbol.julia</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#eba0ac</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>LaTeX preamble</string>
        <key>scope</key>
        <string>text.tex keyword.control.preamble</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#94e2d5</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>LaTeX be functions</string>
        <key>scope</key>
        <string>text.tex support.function.be</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89dceb</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>LaTeX math</string>
        <key>scope</key>
        <string>constant.other.general.math.tex</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f2cdcd</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Lua docstring keywords</string>
        <key>scope</key>
        <string>comment.line.double-dash.documentation.lua storage.type.annotation.lua</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cba6f7</string>
          <key>fontStyle</key>
          <string/>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Lua docstring variables</string>
        <key>scope</key>
        <string>comment.line.double-dash.documentation.lua entity.name.variable.lua, comment.line.double-dash.documentation.lua variable.lua</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cdd6f4</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>heading.1.markdown punctuation.definition.heading.markdown, heading.1.markdown, markup.heading.atx.1.mdx, markup.heading.atx.1.mdx punctuation.definition.heading.mdx, markup.heading.setext.1.markdown, markup.heading.heading-0.asciidoc</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f38ba8</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>heading.2.markdown punctuation.definition.heading.markdown, heading.2.markdown, markup.heading.atx.2.mdx, markup.heading.atx.2.mdx punctuation.definition.heading.mdx, markup.heading.setext.2.markdown, markup.heading.heading-1.asciidoc</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#fab387</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>heading.3.markdown punctuation.definition.heading.markdown, heading.3.markdown, markup.heading.atx.3.mdx, markup.heading.atx.3.mdx punctuation.definition.heading.mdx, markup.heading.heading-2.asciidoc</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f9e2af</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>heading.4.markdown punctuation.definition.heading.markdown, heading.4.markdown, markup.heading.atx.4.mdx, markup.heading.atx.4.mdx punctuation.definition.heading.mdx, markup.heading.heading-3.asciidoc</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#a6e3a1</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>heading.5.markdown punctuation.definition.heading.markdown, heading.5.markdown, markup.heading.atx.5.mdx, markup.heading.atx.5.mdx punctuation.definition.heading.mdx, markup.heading.heading-4.asciidoc</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89b4fa</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>heading.6.markdown punctuation.definition.heading.markdown, heading.6.markdown, markup.heading.atx.6.mdx, markup.heading.atx.6.mdx punctuation.definition.heading.mdx, markup.heading.heading-5.asciidoc</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cba6f7</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>markup.bold</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f38ba8</string>
          <key>fontStyle</key>
          <string>bold</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>markup.italic</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f38ba8</string>
          <key>fontStyle</key>
          <string>italic</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>markup.strikethrough</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#a6adc8</string>
          <key>fontStyle</key>
          <string>strikethrough</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Markdown auto links</string>
        <key>scope</key>
        <string>punctuation.definition.link, markup.underline.link</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89b4fa</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Markdown links</string>
        <key>scope</key>
        <string>text.html.markdown punctuation.definition.link.title, string.other.link.title.markdown, markup.link, punctuation.definition.constant.markdown, constant.other.reference.link.markdown, markup.substitution.attribute-reference</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#b4befe</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Markdown code spans</string>
        <key>scope</key>
        <string>punctuation.definition.raw.markdown, markup.inline.raw.string.markdown, markup.raw.block.markdown</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#a6e3a1</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Markdown triple backtick language identifier</string>
        <key>scope</key>
        <string>fenced_code.block.language</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89dceb</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Markdown triple backticks</string>
        <key>scope</key>
        <string>markup.fenced_code.block punctuation.definition, markup.raw support.asciidoc</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#9399b2</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Markdown quotes</string>
        <key>scope</key>
        <string>markup.quote, punctuation.definition.quote.begin</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f5c2e7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Markdown separators</string>
        <key>scope</key>
        <string>meta.separator.markdown</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#94e2d5</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Markdown list bullets</string>
        <key>scope</key>
        <string>punctuation.definition.list.begin.markdown, markup.list.bullet</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#94e2d5</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Nix attribute names</string>
        <key>scope</key>
        <string>entity.other.attribute-name.multipart.nix, entity.other.attribute-name.single.nix</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89b4fa</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Nix parameter names</string>
        <key>scope</key>
        <string>variable.parameter.name.nix</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cdd6f4</string>
          <key>fontStyle</key>
          <string/>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Nix interpolated parameter names</string>
        <key>scope</key>
        <string>meta.embedded variable.parameter.name.nix</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#b4befe</string>
          <key>fontStyle</key>
          <string/>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Nix paths</string>
        <key>scope</key>
        <string>string.unquoted.path.nix</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f5c2e7</string>
          <key>fontStyle</key>
          <string/>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>PHP Attributes</string>
        <key>scope</key>
        <string>support.attribute.builtin, meta.attribute.php</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f9e2af</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>PHP Parameters (needed for the leading dollar sign)</string>
        <key>scope</key>
        <string>meta.function.parameters.php punctuation.definition.variable.php</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#eba0ac</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>PHP Constants (null, __FILE__, etc.)</string>
        <key>scope</key>
        <string>constant.language.php</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cba6f7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>PHP functions</string>
        <key>scope</key>
        <string>text.html.php support.function</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89dceb</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>PHPdoc keywords</string>
        <key>scope</key>
        <string>keyword.other.phpdoc.php</string>
        <key>settings</key>
        <dict>
          <key>fontStyle</key>
          <string/>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Python argument functions reset to text, otherwise they inherit blue from function-call</string>
        <key>scope</key>
        <string>support.variable.magic.python, meta.function-call.arguments.python</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cdd6f4</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Python double underscore functions</string>
        <key>scope</key>
        <string>support.function.magic.python</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89dceb</string>
          <key>fontStyle</key>
          <string>italic</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Python `self` keyword</string>
        <key>scope</key>
        <string>variable.parameter.function.language.special.self.python, variable.language.special.self.python</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f38ba8</string>
          <key>fontStyle</key>
          <string>italic</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>python keyword flow/logical (for ... in)</string>
        <key>scope</key>
        <string>keyword.control.flow.python, keyword.operator.logical.python</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cba6f7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>python storage type</string>
        <key>scope</key>
        <string>storage.type.function.python</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cba6f7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>python function support</string>
        <key>scope</key>
        <string>support.token.decorator.python, meta.function.decorator.identifier.python</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89dceb</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>python function calls</string>
        <key>scope</key>
        <string>meta.function-call.python</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89b4fa</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>python function decorators</string>
        <key>scope</key>
        <string>entity.name.function.decorator.python, punctuation.definition.decorator.python</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#fab387</string>
          <key>fontStyle</key>
          <string>italic</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>python placeholder reset to normal string</string>
        <key>scope</key>
        <string>constant.character.format.placeholder.other.python</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f5c2e7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Python exception &amp; builtins such as exit()</string>
        <key>scope</key>
        <string>support.type.exception.python, support.function.builtin.python</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#fab387</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>entity.name.type</string>
        <key>scope</key>
        <string>support.type.python</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#fab387</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>python constants (True/False)</string>
        <key>scope</key>
        <string>constant.language.python</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cba6f7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Arguments accessed later in the function body</string>
        <key>scope</key>
        <string>meta.indexed-name.python, meta.item-access.python</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#eba0ac</string>
          <key>fontStyle</key>
          <string>italic</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Python f-strings/binary/unicode storage types</string>
        <key>scope</key>
        <string>storage.type.string.python</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#a6e3a1</string>
          <key>fontStyle</key>
          <string>italic</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Python type hints</string>
        <key>scope</key>
        <string>meta.function.parameters.python</string>
        <key>settings</key>
        <dict>
          <key>fontStyle</key>
          <string/>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Regex string begin/end in JS/TS</string>
        <key>scope</key>
        <string>string.regexp punctuation.definition.string.begin, string.regexp punctuation.definition.string.end</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f5c2e7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Regex anchors (^, $)</string>
        <key>scope</key>
        <string>keyword.control.anchor.regexp</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cba6f7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Regex regular string match</string>
        <key>scope</key>
        <string>string.regexp.ts</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cdd6f4</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Regex group parenthesis &amp; backreference (\1, \2, \3, ...)</string>
        <key>scope</key>
        <string>punctuation.definition.group.regexp, keyword.other.back-reference.regexp</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#a6e3a1</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Regex character class []</string>
        <key>scope</key>
        <string>punctuation.definition.character-class.regexp</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f9e2af</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Regex character classes (\d, \w, \s)</string>
        <key>scope</key>
        <string>constant.other.character-class.regexp</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f5c2e7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Regex range</string>
        <key>scope</key>
        <string>constant.other.character-class.range.regexp</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f5e0dc</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Regex quantifier</string>
        <key>scope</key>
        <string>keyword.operator.quantifier.regexp</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#94e2d5</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Regex constant/numeric</string>
        <key>scope</key>
        <string>constant.character.numeric.regexp</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#fab387</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Regex lookaheads, negative lookaheads, lookbehinds, negative lookbehinds</string>
        <key>scope</key>
        <string>punctuation.definition.group.no-capture.regexp, meta.assertion.look-ahead.regexp, meta.assertion.negative-look-ahead.regexp</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89b4fa</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Rust attribute</string>
        <key>scope</key>
        <string>meta.annotation.rust, meta.annotation.rust punctuation, meta.attribute.rust, punctuation.definition.attribute.rust</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f9e2af</string>
          <key>fontStyle</key>
          <string>italic</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Rust attribute strings</string>
        <key>scope</key>
        <string>meta.attribute.rust string.quoted.double.rust, meta.attribute.rust string.quoted.single.char.rust</string>
        <key>settings</key>
        <dict>
          <key>fontStyle</key>
          <string/>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Rust keyword</string>
        <key>scope</key>
        <string>entity.name.function.macro.rules.rust, storage.type.module.rust, storage.modifier.rust, storage.type.struct.rust, storage.type.enum.rust, storage.type.trait.rust, storage.type.union.rust, storage.type.impl.rust, storage.type.rust, storage.type.function.rust, storage.type.type.rust</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cba6f7</string>
          <key>fontStyle</key>
          <string/>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Rust u/i32, u/i64, etc.</string>
        <key>scope</key>
        <string>entity.name.type.numeric.rust</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cba6f7</string>
          <key>fontStyle</key>
          <string/>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Rust generic</string>
        <key>scope</key>
        <string>meta.generic.rust</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#fab387</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Rust impl</string>
        <key>scope</key>
        <string>entity.name.impl.rust</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f9e2af</string>
          <key>fontStyle</key>
          <string>italic</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Rust module</string>
        <key>scope</key>
        <string>entity.name.module.rust</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#fab387</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Rust trait</string>
        <key>scope</key>
        <string>entity.name.trait.rust</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f9e2af</string>
          <key>fontStyle</key>
          <string>italic</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Rust struct</string>
        <key>scope</key>
        <string>storage.type.source.rust</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f9e2af</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Rust union</string>
        <key>scope</key>
        <string>entity.name.union.rust</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f9e2af</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Rust enum member</string>
        <key>scope</key>
        <string>meta.enum.rust storage.type.source.rust</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#94e2d5</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Rust macro</string>
        <key>scope</key>
        <string>support.macro.rust, meta.macro.rust support.function.rust, entity.name.function.macro.rust</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89b4fa</string>
          <key>fontStyle</key>
          <string>italic</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Rust lifetime</string>
        <key>scope</key>
        <string>storage.modifier.lifetime.rust, entity.name.type.lifetime</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89b4fa</string>
          <key>fontStyle</key>
          <string>italic</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Rust string formatting</string>
        <key>scope</key>
        <string>string.quoted.double.rust constant.other.placeholder.rust</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f5c2e7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Rust return type generic</string>
        <key>scope</key>
        <string>meta.function.return-type.rust meta.generic.rust storage.type.rust</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cdd6f4</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Rust functions</string>
        <key>scope</key>
        <string>meta.function.call.rust</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89b4fa</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Rust angle brackets</string>
        <key>scope</key>
        <string>punctuation.brackets.angle.rust</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89dceb</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Rust constants</string>
        <key>scope</key>
        <string>constant.other.caps.rust</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#fab387</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Rust function parameters</string>
        <key>scope</key>
        <string>meta.function.definition.rust variable.other.rust</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#eba0ac</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Rust closure variables</string>
        <key>scope</key>
        <string>meta.function.call.rust variable.other.rust</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cdd6f4</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Rust self</string>
        <key>scope</key>
        <string>variable.language.self.rust</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f38ba8</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Rust metavariable names</string>
        <key>scope</key>
        <string>variable.other.metavariable.name.rust, meta.macro.metavariable.rust keyword.operator.macro.dollar.rust</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f5c2e7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Shell shebang</string>
        <key>scope</key>
        <string>comment.line.shebang, comment.line.shebang punctuation.definition.comment, comment.line.shebang, punctuation.definition.comment.shebang.shell, meta.shebang.shell</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f5c2e7</string>
          <key>fontStyle</key>
          <string>italic</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Shell shebang command</string>
        <key>scope</key>
        <string>comment.line.shebang constant.language</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#94e2d5</string>
          <key>fontStyle</key>
          <string>italic</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Shell interpolated command</string>
        <key>scope</key>
        <string>meta.function-call.arguments.shell punctuation.definition.variable.shell, meta.function-call.arguments.shell punctuation.section.interpolation, meta.function-call.arguments.shell punctuation.definition.variable.shell, meta.function-call.arguments.shell punctuation.section.interpolation</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f38ba8</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Shell interpolated command variable</string>
        <key>scope</key>
        <string>meta.string meta.interpolation.parameter.shell variable.other.readwrite</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#fab387</string>
          <key>fontStyle</key>
          <string>italic</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>source.shell punctuation.section.interpolation, punctuation.definition.evaluation.backticks.shell</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#94e2d5</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Shell EOF</string>
        <key>scope</key>
        <string>entity.name.tag.heredoc.shell</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cba6f7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Shell quoted variable</string>
        <key>scope</key>
        <string>string.quoted.double.shell variable.other.normal.shell</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cdd6f4</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>JSON Keys</string>
        <key>scope</key>
        <string>source.json meta.mapping.key string</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89b4fa</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>JSON key surrounding quotes</string>
        <key>scope</key>
        <string>source.json meta.mapping.key punctuation.definition.string.begin, source.json meta.mapping.key punctuation.definition.string.end</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#9399b2</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>markup.heading.synopsis.man, markup.heading.title.man, markup.heading.other.man, markup.heading.env.man</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#cba6f7</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>markup.heading.commands.man</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#89b4fa</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>markup.heading.env.man</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f5c2e7</string>
        </dict>
      </dict>
      <dict>
        <key>name</key>
        <string>Man page options</string>
        <key>scope</key>
        <string>entity.name</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#94e2d5</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>markup.heading.1.markdown</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f38ba8</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>markup.heading.2.markdown</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#fab387</string>
        </dict>
      </dict>
      <dict>
        <key>scope</key>
        <string>markup.heading.markdown</string>
        <key>settings</key>
        <dict>
          <key>foreground</key>
          <string>#f9e2af</string>
        </dict>
      </dict>
    </array>
  </dict>
</plist>

================
File: yazi/keymap.toml
================
# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/keymap.json"

[manager]

keymap = [
	{ on = "<Esc>", run = "escape",             desc = "Exit visual mode, clear selected, or cancel search" },
	{ on = "<C-[>", run = "escape",             desc = "Exit visual mode, clear selected, or cancel search" },
	{ on = "q",     run = "quit",               desc = "Quit the process" },
	{ on = "Q",     run = "quit --no-cwd-file", desc = "Quit the process without outputting cwd-file" },
	{ on = "<C-c>", run = "close",              desc = "Close the current tab, or quit if it's last" },
	{ on = "<C-z>", run = "suspend",            desc = "Suspend the process" },

	# Hopping
	{ on = "k", run = "arrow -1", desc = "Move cursor up" },
	{ on = "j", run = "arrow 1",  desc = "Move cursor down" },

	{ on = "<Up>",    run = "arrow -1", desc = "Move cursor up" },
	{ on = "<Down>",  run = "arrow 1",  desc = "Move cursor down" },

	{ on = "<C-u>", run = "arrow -50%",  desc = "Move cursor up half page" },
	{ on = "<C-d>", run = "arrow 50%",   desc = "Move cursor down half page" },
	{ on = "<C-b>", run = "arrow -100%", desc = "Move cursor up one page" },
	{ on = "<C-f>", run = "arrow 100%",  desc = "Move cursor down one page" },

	{ on = "<S-PageUp>",   run = "arrow -50%",  desc = "Move cursor up half page" },
	{ on = "<S-PageDown>", run = "arrow 50%",   desc = "Move cursor down half page" },
	{ on = "<PageUp>",     run = "arrow -100%", desc = "Move cursor up one page" },
	{ on = "<PageDown>",   run = "arrow 100%",  desc = "Move cursor down one page" },

	{ on = [ "g", "g" ], run = "arrow top", desc = "Move cursor to the top" },
	{ on = "G",          run = "arrow bot",  desc = "Move cursor to the bottom" },

	# Navigation
	{ on = "h", run = "leave", desc = "Go back to the parent directory" },
	{ on = "l", run = "enter", desc = "Enter the child directory" },

	{ on = "<Left>",  run = "leave", desc = "Go back to the parent directory" },
	{ on = "<Right>", run = "enter", desc = "Enter the child directory" },

	{ on = "H", run = "back",    desc = "Go back to the previous directory" },
	{ on = "L", run = "forward", desc = "Go forward to the next directory" },

	# Toggle
	{ on = "<Space>", run = [ "toggle", "arrow 1" ], desc = "Toggle the current selection state" },
	{ on = "<C-a>",   run = "toggle_all --state=on", desc = "Select all files" },
	{ on = "<C-r>",   run = "toggle_all",            desc = "Invert selection of all files" },

	# Visual mode
	{ on = "v", run = "visual_mode",         desc = "Enter visual mode (selection mode)" },
	{ on = "V", run = "visual_mode --unset", desc = "Enter visual mode (unset mode)" },

	# Seeking
	{ on = "K", run = "seek -5", desc = "Seek up 5 units in the preview" },
	{ on = "J", run = "seek 5",  desc = "Seek down 5 units in the preview" },

	# Spotting
	{ on = "<Tab>", run = "spot", desc = "Spot hovered file" },

	# Operation
	{ on = "o",         run = "open",                        desc = "Open selected files" },
	{ on = "O",         run = "open --interactive",          desc = "Open selected files interactively" },
	{ on = "<Enter>",   run = "open",                        desc = "Open selected files" },
	{ on = "<S-Enter>", run = "open --interactive",          desc = "Open selected files interactively" },
	{ on = "y",         run = "yank",                        desc = "Yank selected files (copy)" },
	{ on = "x",         run = "yank --cut",                  desc = "Yank selected files (cut)" },
	{ on = "p",         run = "paste",                       desc = "Paste yanked files" },
	{ on = "P",         run = "paste --force",               desc = "Paste yanked files (overwrite if the destination exists)" },
	{ on = "-",         run = "link",                        desc = "Symlink the absolute path of yanked files" },
	{ on = "_",         run = "link --relative",             desc = "Symlink the relative path of yanked files" },
	{ on = "<C-->",     run = "hardlink",                    desc = "Hardlink yanked files" },
	{ on = "Y",         run = "unyank",                      desc = "Cancel the yank status" },
	{ on = "X",         run = "unyank",                      desc = "Cancel the yank status" },
	{ on = "d",         run = "remove",                      desc = "Trash selected files" },
	{ on = "D",         run = "remove --permanently",        desc = "Permanently delete selected files" },
	{ on = "a",         run = "create",                      desc = "Create a file (ends with / for directories)" },
	{ on = "r",         run = "rename --cursor=before_ext",  desc = "Rename selected file(s)" },
	{ on = ";",         run = "shell --interactive",         desc = "Run a shell command" },
	{ on = ":",         run = "shell --block --interactive", desc = "Run a shell command (block until finishes)" },
	{ on = ".",         run = "hidden toggle",               desc = "Toggle the visibility of hidden files" },
	{ on = "s",         run = "search --via=fd",             desc = "Search files by name via fd" },
	{ on = "S",         run = "search --via=rg",             desc = "Search files by content via ripgrep" },
	{ on = "<C-s>",     run = "escape --search",             desc = "Cancel the ongoing search" },
	{ on = "z",         run = "plugin zoxide",               desc = "Jump to a directory via zoxide" },
	{ on = "Z",         run = "plugin fzf",                  desc = "Jump to a file/directory via fzf" },

	# Linemode
	{ on = [ "m", "s" ], run = "linemode size",        desc = "Linemode: size" },
	{ on = [ "m", "p" ], run = "linemode permissions", desc = "Linemode: permissions" },
	{ on = [ "m", "b" ], run = "linemode btime",       desc = "Linemode: btime" },
	{ on = [ "m", "m" ], run = "linemode mtime",       desc = "Linemode: mtime" },
	{ on = [ "m", "o" ], run = "linemode owner",       desc = "Linemode: owner" },
	{ on = [ "m", "n" ], run = "linemode none",        desc = "Linemode: none" },

	# Copy
	{ on = [ "c", "c" ], run = "copy path",             desc = "Copy the file path" },
	{ on = [ "c", "d" ], run = "copy dirname",          desc = "Copy the directory path" },
	{ on = [ "c", "f" ], run = "copy filename",         desc = "Copy the filename" },
	{ on = [ "c", "n" ], run = "copy name_without_ext", desc = "Copy the filename without extension" },

	# Filter
	{ on = "f", run = "filter --smart", desc = "Filter files" },

	# Find
	{ on = "/", run = "find --smart",            desc = "Find next file" },
	{ on = "?", run = "find --previous --smart", desc = "Find previous file" },
	{ on = "n", run = "find_arrow",              desc = "Goto the next found" },
	{ on = "N", run = "find_arrow --previous",   desc = "Goto the previous found" },

	# Sorting
	{ on = [ ",", "m" ], run = [ "sort mtime --reverse=no", "linemode mtime" ], desc = "Sort by modified time" },
	{ on = [ ",", "M" ], run = [ "sort mtime --reverse", "linemode mtime" ],    desc = "Sort by modified time (reverse)" },
	{ on = [ ",", "b" ], run = [ "sort btime --reverse=no", "linemode btime" ], desc = "Sort by birth time" },
	{ on = [ ",", "B" ], run = [ "sort btime --reverse", "linemode btime" ],    desc = "Sort by birth time (reverse)" },
	{ on = [ ",", "e" ], run = "sort extension --reverse=no",                   desc = "Sort by extension" },
	{ on = [ ",", "E" ], run = "sort extension --reverse",                      desc = "Sort by extension (reverse)" },
	{ on = [ ",", "a" ], run = "sort alphabetical --reverse=no",                desc = "Sort alphabetically" },
	{ on = [ ",", "A" ], run = "sort alphabetical --reverse",                   desc = "Sort alphabetically (reverse)" },
	{ on = [ ",", "n" ], run = "sort natural --reverse=no",                     desc = "Sort naturally" },
	{ on = [ ",", "N" ], run = "sort natural --reverse",                        desc = "Sort naturally (reverse)" },
	{ on = [ ",", "s" ], run = [ "sort size --reverse=no", "linemode size" ],   desc = "Sort by size" },
	{ on = [ ",", "S" ], run = [ "sort size --reverse", "linemode size" ],      desc = "Sort by size (reverse)" },
	{ on = [ ",", "r" ], run = "sort random --reverse=no",                      desc = "Sort randomly" },

	# Goto
	{ on = [ "g", "h" ],       run = "cd ~",             desc = "Go home" },
	{ on = [ "g", "c" ],       run = "cd ~/.config",     desc = "Goto ~/.config" },
	{ on = [ "g", "d" ],       run = "cd ~/Downloads",   desc = "Goto ~/Downloads" },
	{ on = [ "g", "<Space>" ], run = "cd --interactive", desc = "Jump interactively" },

	# Tabs
	{ on = "t", run = "tab_create --current", desc = "Create a new tab with CWD" },

	{ on = "1", run = "tab_switch 0", desc = "Switch to the first tab" },
	{ on = "2", run = "tab_switch 1", desc = "Switch to the second tab" },
	{ on = "3", run = "tab_switch 2", desc = "Switch to the third tab" },
	{ on = "4", run = "tab_switch 3", desc = "Switch to the fourth tab" },
	{ on = "5", run = "tab_switch 4", desc = "Switch to the fifth tab" },
	{ on = "6", run = "tab_switch 5", desc = "Switch to the sixth tab" },
	{ on = "7", run = "tab_switch 6", desc = "Switch to the seventh tab" },
	{ on = "8", run = "tab_switch 7", desc = "Switch to the eighth tab" },
	{ on = "9", run = "tab_switch 8", desc = "Switch to the ninth tab" },

	{ on = "[", run = "tab_switch -1 --relative", desc = "Switch to the previous tab" },
	{ on = "]", run = "tab_switch 1 --relative",  desc = "Switch to the next tab" },

	{ on = "{", run = "tab_swap -1", desc = "Swap current tab with previous tab" },
	{ on = "}", run = "tab_swap 1",  desc = "Swap current tab with next tab" },

	# Tasks
	{ on = "w", run = "tasks_show", desc = "Show task manager" },

	# Help
	{ on = "~",    run = "help", desc = "Open help" },
	{ on = "<F1>", run = "help", desc = "Open help" },
]

[tasks]

keymap = [
	{ on = "<Esc>", run = "close", desc = "Close task manager" },
	{ on = "<C-[>", run = "close", desc = "Close task manager" },
	{ on = "<C-c>", run = "close", desc = "Close task manager" },
	{ on = "w",     run = "close", desc = "Close task manager" },

	{ on = "k", run = "arrow -1", desc = "Move cursor up" },
	{ on = "j", run = "arrow 1",  desc = "Move cursor down" },

	{ on = "<Up>",   run = "arrow -1", desc = "Move cursor up" },
	{ on = "<Down>", run = "arrow 1",  desc = "Move cursor down" },

	{ on = "<Enter>", run = "inspect", desc = "Inspect the task" },
	{ on = "x",       run = "cancel",  desc = "Cancel the task" },

	# Help
	{ on = "~",    run = "help", desc = "Open help" },
	{ on = "<F1>", run = "help", desc = "Open help" },
]

[spot]

keymap = [
	{ on = "<Esc>", run = "close", desc = "Close the spot" },
	{ on = "<C-[>", run = "close", desc = "Close the spot" },
	{ on = "<C-c>", run = "close", desc = "Close the spot" },
	{ on = "<Tab>", run = "close", desc = "Close the spot" },

	{ on = "k", run = "arrow -1", desc = "Move cursor up" },
	{ on = "j", run = "arrow 1",  desc = "Move cursor down" },
	{ on = "h", run = "swipe -1", desc = "Swipe to the previous file" },
	{ on = "l", run = "swipe 1",  desc = "Swipe to the next file" },

	{ on = "<Up>",    run = "arrow -1", desc = "Move cursor up" },
	{ on = "<Down>",  run = "arrow 1",  desc = "Move cursor down" },
	{ on = "<Left>",  run = "swipe -1", desc = "Swipe to the next file" },
	{ on = "<Right>", run = "swipe 1",  desc = "Swipe to the previous file" },

	# Copy
	{ on = [ "c", "c" ], run = "copy cell", desc = "Copy selected cell" },

	# Help
	{ on = "~",    run = "help", desc = "Open help" },
	{ on = "<F1>", run = "help", desc = "Open help" },
]

[pick]

keymap = [
	{ on = "<Esc>",   run = "close",          desc = "Cancel pick" },
	{ on = "<C-[>",   run = "close",          desc = "Cancel pick" },
	{ on = "<C-c>",   run = "close",          desc = "Cancel pick" },
	{ on = "<Enter>", run = "close --submit", desc = "Submit the pick" },

	{ on = "k", run = "arrow -1", desc = "Move cursor up" },
	{ on = "j", run = "arrow 1",  desc = "Move cursor down" },

	{ on = "<Up>",   run = "arrow -1", desc = "Move cursor up" },
	{ on = "<Down>", run = "arrow 1",  desc = "Move cursor down" },

	# Help
	{ on = "~",    run = "help", desc = "Open help" },
	{ on = "<F1>", run = "help", desc = "Open help" },
]

[input]

keymap = [
	{ on = "<C-c>",   run = "close",          desc = "Cancel input" },
	{ on = "<Enter>", run = "close --submit", desc = "Submit input" },
	{ on = "<Esc>",   run = "escape",         desc = "Go back the normal mode, or cancel input" },
	{ on = "<C-[>",   run = "escape",         desc = "Go back the normal mode, or cancel input" },

	# Mode
	{ on = "i", run = "insert",                             desc = "Enter insert mode" },
	{ on = "I", run = [ "move first-char", "insert" ],      desc = "Move to the BOL, and enter insert mode" },
	{ on = "a", run = "insert --append",                    desc = "Enter append mode" },
	{ on = "A", run = [ "move eol", "insert --append" ],    desc = "Move to the EOL, and enter append mode" },
	{ on = "v", run = "visual",                             desc = "Enter visual mode" },
	{ on = "V", run = [ "move bol", "visual", "move eol" ], desc = "Enter visual mode and select all" },
	{ on = "r", run = "replace",                            desc = "Replace a single character" },

	# Character-wise movement
	{ on = "h",       run = "move -1", desc = "Move back a character" },
	{ on = "l",       run = "move 1",  desc = "Move forward a character" },
	{ on = "<Left>",  run = "move -1", desc = "Move back a character" },
	{ on = "<Right>", run = "move 1",  desc = "Move forward a character" },
	{ on = "<C-b>",   run = "move -1", desc = "Move back a character" },
	{ on = "<C-f>",   run = "move 1",  desc = "Move forward a character" },

	# Word-wise movement
	{ on = "b",     run = "backward",                    desc = "Move back to the start of the current or previous word" },
	{ on = "B",     run = "backward --far",              desc = "Move back to the start of the current or previous WORD" },
	{ on = "w",     run = "forward",                     desc = "Move forward to the start of the next word" },
	{ on = "W",     run = "forward --far",               desc = "Move forward to the start of the next WORD" },
	{ on = "e",     run = "forward --end-of-word",       desc = "Move forward to the end of the current or next word" },
	{ on = "E",     run = "forward --far --end-of-word", desc = "Move forward to the end of the current or next WORD" },
	{ on = "<A-b>", run = "backward",                    desc = "Move back to the start of the current or previous word" },
	{ on = "<A-f>", run = "forward --end-of-word",       desc = "Move forward to the end of the current or next word" },

	# Line-wise movement
	{ on = "0",      run = "move bol",        desc = "Move to the BOL" },
	{ on = "$",      run = "move eol",        desc = "Move to the EOL" },
	{ on = "_",      run = "move first-char", desc = "Move to the first non-whitespace character" },
	{ on = "^",      run = "move first-char", desc = "Move to the first non-whitespace character" },
	{ on = "<C-a>",  run = "move bol",        desc = "Move to the BOL" },
	{ on = "<C-e>",  run = "move eol",        desc = "Move to the EOL" },
	{ on = "<Home>", run = "move bol",        desc = "Move to the BOL" },
	{ on = "<End>",  run = "move eol",        desc = "Move to the EOL" },

	# Delete
	{ on = "<Backspace>", run = "backspace",         desc = "Delete the character before the cursor" },
	{ on = "<Delete>",    run = "backspace --under", desc = "Delete the character under the cursor" },
	{ on = "<C-h>",       run = "backspace",         desc = "Delete the character before the cursor" },
	{ on = "<C-d>",       run = "backspace --under", desc = "Delete the character under the cursor" },

	# Kill
	{ on = "<C-u>", run = "kill bol",      desc = "Kill backwards to the BOL" },
	{ on = "<C-k>", run = "kill eol",      desc = "Kill forwards to the EOL" },
	{ on = "<C-w>", run = "kill backward", desc = "Kill backwards to the start of the current word" },
	{ on = "<A-d>", run = "kill forward",  desc = "Kill forwards to the end of the current word" },

	# Cut/Yank/Paste
	{ on = "d", run = "delete --cut",                              desc = "Cut the selected characters" },
	{ on = "D", run = [ "delete --cut", "move eol" ],              desc = "Cut until the EOL" },
	{ on = "c", run = "delete --cut --insert",                     desc = "Cut the selected characters, and enter insert mode" },
	{ on = "C", run = [ "delete --cut --insert", "move eol" ],     desc = "Cut until the EOL, and enter insert mode" },
	{ on = "x", run = [ "delete --cut", "move 1 --in-operating" ], desc = "Cut the current character" },
	{ on = "y", run = "yank",                                      desc = "Copy the selected characters" },
	{ on = "p", run = "paste",                                     desc = "Paste the copied characters after the cursor" },
	{ on = "P", run = "paste --before",                            desc = "Paste the copied characters before the cursor" },

	# Undo/Redo
	{ on = "u",     run = "undo", desc = "Undo the last operation" },
	{ on = "<C-r>", run = "redo", desc = "Redo the last operation" },

	# Help
	{ on = "~",    run = "help", desc = "Open help" },
	{ on = "<F1>", run = "help", desc = "Open help" },
]

[confirm]

keymap = [
	{ on = "<Esc>",   run = "close",          desc = "Cancel the confirm" },
	{ on = "<C-[>",   run = "close",          desc = "Cancel the confirm" },
	{ on = "<C-c>",   run = "close",          desc = "Cancel the confirm" },
	{ on = "<Enter>", run = "close --submit", desc = "Submit the confirm" },

	{ on = "n", run = "close",          desc = "Cancel the confirm" },
	{ on = "y", run = "close --submit", desc = "Submit the confirm" },

	{ on = "k", run = "arrow -1", desc = "Move cursor up" },
	{ on = "j", run = "arrow 1",  desc = "Move cursor down" },

	{ on = "<Up>",   run = "arrow -1", desc = "Move cursor up" },
	{ on = "<Down>", run = "arrow 1",  desc = "Move cursor down" },

	# Help
	{ on = "~",    run = "help", desc = "Open help" },
	{ on = "<F1>", run = "help", desc = "Open help" },
]

[completion]

keymap = [
	{ on = "<C-c>",   run = "close",                                      desc = "Cancel completion" },
	{ on = "<Tab>",   run = "close --submit",                             desc = "Submit the completion" },
	{ on = "<Enter>", run = [ "close --submit", "close_input --submit" ], desc = "Submit the completion and input" },

	{ on = "<A-k>", run = "arrow -1", desc = "Move cursor up" },
	{ on = "<A-j>", run = "arrow 1",  desc = "Move cursor down" },

	{ on = "<Up>",   run = "arrow -1", desc = "Move cursor up" },
	{ on = "<Down>", run = "arrow 1",  desc = "Move cursor down" },

	{ on = "<C-p>", run = "arrow -1", desc = "Move cursor up" },
	{ on = "<C-n>", run = "arrow 1",  desc = "Move cursor down" },

	# Help
	{ on = "~",    run = "help", desc = "Open help" },
	{ on = "<F1>", run = "help", desc = "Open help" },
]

[help]

keymap = [
	{ on = "<Esc>", run = "escape", desc = "Clear the filter, or hide the help" },
	{ on = "<C-[>", run = "escape", desc = "Clear the filter, or hide the help" },
	{ on = "<C-c>", run = "close",  desc = "Hide the help" },

	# Navigation
	{ on = "k", run = "arrow -1", desc = "Move cursor up" },
	{ on = "j", run = "arrow 1",  desc = "Move cursor down" },

	{ on = "<Up>",   run = "arrow -1", desc = "Move cursor up" },
	{ on = "<Down>", run = "arrow 1",  desc = "Move cursor down" },

	# Filtering
	{ on = "f", run = "filter", desc = "Apply a filter for the help items" },
]

================
File: yazi/package.toml
================
[plugin]
deps = []

[[flavor.deps]]
use = "yazi-rs/flavors:catppuccin-mocha"
rev = "df95930"
hash = "c40e434318a8ceffd01842f8dfb2390e"

================
File: yazi/theme.toml
================
[flavor]
dark = "catppuccin-mocha"
light = "catppuccin-mocha"

================
File: yazi/yazi.toml
================
# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[manager]
ratio          = [ 1, 4, 3 ]
sort_by        = "alphabetical"
sort_sensitive = false
sort_reverse 	 = false
sort_dir_first = true
sort_translit  = false
linemode       = "none"
show_hidden    = false
show_symlink   = true
scrolloff      = 5
mouse_events   = [ "click", "scroll" ]
title_format   = "Yazi: {cwd}"

[preview]
wrap            = "no"
tab_size        = 2
max_width       = 600
max_height      = 900
cache_dir       = ""
image_delay     = 30
image_filter    = "triangle"
image_quality   = 75
sixel_fraction  = 15
ueberzug_scale  = 1
ueberzug_offset = [ 0, 0, 0, 0 ]

[opener]
edit = [
	{ run = '${EDITOR:-vi} "$@"', desc = "$EDITOR", block = true, for = "unix" },
	{ run = 'code %*',    orphan = true, desc = "code",           for = "windows" },
	{ run = 'code -w %*', block = true,  desc = "code (block)",   for = "windows" },
]
open = [
	{ run = 'xdg-open "$1"',                desc = "Open", for = "linux" },
	{ run = 'open "$@"',                    desc = "Open", for = "macos" },
	{ run = 'start "" "%1"', orphan = true, desc = "Open", for = "windows" },
	{ run = 'termux-open "$1"',             desc = "Open", for = "android" },
]
reveal = [
	{ run = 'xdg-open "$(dirname "$1")"',           desc = "Reveal", for = "linux" },
	{ run = 'open -R "$1"',                         desc = "Reveal", for = "macos" },
	{ run = 'explorer /select,"%1"', orphan = true, desc = "Reveal", for = "windows" },
	{ run = 'termux-open "$(dirname "$1")"',        desc = "Reveal", for = "android" },
	{ run = '''exiftool "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show EXIF", for = "unix" },
]
extract = [
	{ run = 'ya pub extract --list "$@"', desc = "Extract here", for = "unix" },
	{ run = 'ya pub extract --list %*',   desc = "Extract here", for = "windows" },
]
play = [
	{ run = 'mpv --force-window "$@"', orphan = true, for = "unix" },
	{ run = 'mpv --force-window %*', orphan = true, for = "windows" },
	{ run = '''mediainfo "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show media info", for = "unix" },
]

[open]
rules = [
	# Folder
	{ name = "*/", use = [ "edit", "open", "reveal" ] },
	# Text
	{ mime = "text/*", use = [ "edit", "reveal" ] },
	# Image
	{ mime = "image/*", use = [ "open", "reveal" ] },
	# Media
	{ mime = "{audio,video}/*", use = [ "play", "reveal" ] },
	# Archive
	{ mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", use = [ "extract", "reveal" ] },
	# JSON
	{ mime = "application/{json,ndjson}", use = [ "edit", "reveal" ] },
	{ mime = "*/javascript", use = [ "edit", "reveal" ] },
	# Empty file
	{ mime = "inode/empty", use = [ "edit", "reveal" ] },
	# Fallback
	{ name = "*", use = [ "open", "reveal" ] },
]

[tasks]
micro_workers    = 10
macro_workers    = 10
bizarre_retry    = 3
image_alloc      = 536870912  # 512MB
image_bound      = [ 0, 0 ]
suppress_preload = false

[plugin]

fetchers = [
	# Mimetype
	{ id = "mime", name = "*", run = "mime", prio = "high" },
]
spotters = [
	{ name = "*/", run = "folder" },
	# Code
	{ mime = "text/*", run = "code" },
	{ mime = "application/{mbox,javascript,wine-extension-ini}", run = "code" },
	# Image
	{ mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
	{ mime = "image/*", run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# Fallback
	{ name = "*", run = "file" },
]
preloaders = [
	# Image
	{ mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
	{ mime = "image/*", run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# PDF
	{ mime = "application/pdf", run = "pdf" },
	# Font
	{ mime = "font/*", run = "font" },
	{ mime = "application/ms-opentype", run = "font" },
]
previewers = [
	{ name = "*/", run = "folder", sync = true },
	# Code
	{ mime = "text/*", run = "code" },
	{ mime = "application/{mbox,javascript,wine-extension-ini}", run = "code" },
	# JSON
	{ mime = "application/{json,ndjson}", run = "json" },
	# Image
	{ mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
	{ mime = "image/*", run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# PDF
	{ mime = "application/pdf", run = "pdf" },
	# Archive
	{ mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", run = "archive" },
	{ mime = "application/{debian*-package,redhat-package-manager,rpm,android.package-archive}", run = "archive" },
	{ name = "*.{AppImage,appimage}", run = "archive" },
	# Virtual Disk / Disk Image
	{ mime = "application/{iso9660-image,qemu-disk,ms-wim,apple-diskimage}", run = "archive" },
	{ mime = "application/virtualbox-{vhd,vhdx}", run = "archive" },
	{ name = "*.{img,fat,ext,ext2,ext3,ext4,squashfs,ntfs,hfs,hfsx}", run = "archive" },
	# Font
	{ mime = "font/*", run = "font" },
	{ mime = "application/ms-opentype", run = "font" },
	# Empty file
	{ mime = "inode/empty", run = "empty" },
	# Fallback
	{ name = "*", run = "file" },
]

[input]
cursor_blink = false

# cd
cd_title  = "Change directory:"
cd_origin = "top-center"
cd_offset = [ 0, 2, 50, 3 ]

# create
create_title  = [ "Create:", "Create (dir):" ]
create_origin = "top-center"
create_offset = [ 0, 2, 50, 3 ]

# rename
rename_title  = "Rename:"
rename_origin = "hovered"
rename_offset = [ 0, 1, 50, 3 ]

# filter
filter_title  = "Filter:"
filter_origin = "top-center"
filter_offset = [ 0, 2, 50, 3 ]

# find
find_title  = [ "Find next:", "Find previous:" ]
find_origin = "top-center"
find_offset = [ 0, 2, 50, 3 ]

# search
search_title  = "Search via {n}:"
search_origin = "top-center"
search_offset = [ 0, 2, 50, 3 ]

# shell
shell_title  = [ "Shell:", "Shell (block):" ]
shell_origin = "top-center"
shell_offset = [ 0, 2, 50, 3 ]

[confirm]
# trash
trash_title 	= "Trash {n} selected file{s}?"
trash_origin	= "center"
trash_offset	= [ 0, 0, 70, 20 ]

# delete
delete_title 	= "Permanently delete {n} selected file{s}?"
delete_origin	= "center"
delete_offset	= [ 0, 0, 70, 20 ]

# overwrite
overwrite_title   = "Overwrite file?"
overwrite_content = "Will overwrite the following file:"
overwrite_origin  = "center"
overwrite_offset  = [ 0, 0, 50, 15 ]

# quit
quit_title   = "Quit?"
quit_content = "The following tasks are still running, are you sure you want to quit?"
quit_origin  = "center"
quit_offset  = [ 0, 0, 50, 15 ]

[pick]
open_title  = "Open with:"
open_origin = "hovered"
open_offset = [ 0, 1, 50, 7 ]

[which]
sort_by      	 = "none"
sort_sensitive = false
sort_reverse 	 = false
sort_translit  = false

================
File: .gitignore
================
.aider*
nvim/.DS_Store
nvim/nvim
tmux/tmux
yazi/yazi
.DS_Store

================
File: .zshrc
================
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Load completion system early
autoload -Uz compinit
compinit

# ======================
# ZSH Configuration
# ======================

# Enable Powerlevel10k theme
ZSH_THEME="powerlevel10k/powerlevel10k"

# Load Powerlevel10k (if not already loaded)
if [[ -f ~/powerlevel10k/powerlevel10k.zsh-theme ]]; then
    source ~/powerlevel10k/powerlevel10k.zsh-theme
else
    echo "Powerlevel10k not found. Install it with:"
    echo "git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k"
fi

# ======================
# Environment Variables
# ======================

# Set PATH to include system binaries and user-specific directories
export PATH="/bin:/usr/bin:/usr/local/bin:$HOME/Library/Python/3.13/bin:$HOME/.local/bin:$PATH"

# Source additional environment settings (if the file exists)
if [[ -f "$HOME/.local/bin/env" ]]; then
    source "$HOME/.local/bin/env"
fi

# ======================
# Aliases
# ======================

# Activate the aider virtual environment
# alias aiderenv="source /Users/marvinvilaysack/aider-env/bin/activate"

# Common shortcuts
alias ll="ls -la"  # List all files in long format
alias cls="clear"  # Clear the terminal screen

# ======================
# Custom Functions
# ======================

# Create a new directory and cd into it
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# ======================
# Plugins (Optional)
# ======================

# Enable ZSH plugins (if using Oh My Zsh or similar)
# Example:
plugins=(git zsh-autosuggestions zsh-syntax-highlighting)

# ======================
# Miscellaneous
# ======================

# Set default editor (e.g., nano or vim)
export EDITOR="nvim"

# Enable color support for commands like ls
export CLICOLOR=1
export LSCOLORS="ExFxBxDxCxegedabagacad"

# ======================
# End of Configuration
# ======================
source ~/powerlevel10k/powerlevel10k.zsh-theme

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
alias python="python3"
export PATH="/Users/marvinvilaysack/Library/Python/3.9/bin:$PATH"
export XDG_CONFIG_HOME="$HOME/.config"

## alias
#
#alias vi='nvim'

alias vi='nvim'
DISABLE_AUTO_TITLE="true"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

fzf_cd() {
  # Find directories and let fzf select one
  local dir
  dir=$(find . -type d 2> /dev/null | fzf +m) && cd "$dir"
}
alias fcd=fzf_cd


# Function to add and push updates to dotfiles with chezmoi
function chezmoi_push() {
    chezmoi add ~/.zshrc
    cd ~/.local/share/chezmoi || { echo "chezmoi directory not found"; return 1; }
    git commit -am "Updated .zshrc"
    git push
    echo "Dotfiles updated and pushed successfully!"
}

# Pretty print aliases and functions
function zlist() {
    echo -e "\n\033[1;34m=== Custom Aliases ===\033[0m"
    grep '^alias ' ~/.zshrc | awk -F'=' '{printf "\033[1;32m%-20s\033[0m %s\n", $1, $2}' | column -t -s '='

    echo -e "\n\033[1;34m=== Custom Functions ===\033[0m"
    grep '^function ' ~/.zshrc | awk '{print "\033[1;36m" $0 "\033[0m"}'

    echo -e "\n\033[1;34m=== End of List ===\033[0m"
}

# Short alias for easy access
alias zcmds="zlist"
alias k="kubectl"
# Enable autocompletion
# autoload -Uz compinit
# compinit
alias config='cd ~/.config'


function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

#attach session tmux
#
function tmux_last_session(){

    LAST_TMUX_SESSION=$(tmux list-sessions | awk -F ":" '{print$1}' | tail -n1);
    tmux attach -t $LAST_TMUX_SESSION
}
bindkey -s '^s' 'tmux_last_session ^M'

### MANAGED BY RANCHER DESKTOP START (DO NOT EDIT)
export PATH="/Users/marvinvilaysack/.rd/bin:$PATH"
### MANAGED BY RANCHER DESKTOP END (DO NOT EDIT)
# Autoload compinit is now at the top of the file

# kubectl completion (will now work properly with compinit loaded above)
[[ $commands[kubectl] ]] && source <(kubectl completion zsh) # add autocomplete permanently to your zsh shell
source /opt/homebrew/opt/chruby/share/chruby/chruby.sh
source /opt/homebrew/opt/chruby/share/chruby/auto.sh
chruby ruby-3.4.1 # run chruby to see actual version

================
File: README.md
================
# dotfiles

> "We become what we behold. We shape our tools and then our tools shape us".

## Configs
```bash
git clone https://github.com/agalea91/dotfiles.git ~/dotfiles
ln -sf ~/dotfiles/nvim ~/.config/nvim
ln -sf ~/dotfiles/tmux ~/.config/tmux
ln -sf ~/dotfiles/yazi ~/.config/yazi
ln -sf ~/dotfiles/.zshrc ~/.zshrc
```

## Scripts
```bash
./symlink_dotfiles.sh
```

The symlink script will:
- Create necessary config directories
- Backup any existing configs (with .backup extension)
- Create symlinks for nvim, tmux, yazi configs and .zshrc
- Provide feedback on the process

================
File: symlink_dotfiles.sh
================
#!/bin/bash

# Function to backup existing config
backup_config() {
  local file=$1
  if [ -e "$file" ] && [ ! -L "$file" ]; then
    echo "Backing up existing $file to ${file}.backup"
    mv "$file" "${file}.backup"
  fi
}

# Create necessary config directories
mkdir -p "$HOME/.config"
#TODO

#Backup
#TEST
# Backup existing configs
backup_config "$HOME/.config/nvim"
backup_config "$HOME/.config/tmux"
backup_config "$HOME/.config/yazi"
backup_config "$HOME/.zshrc"

#TODO

#TODO
# Get the directory where this script is located
DOTFILES_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Symlink configs
ln -sf "$DOTFILES_DIR/nvim" "$HOME/.config/nvim"
ln -sf "$DOTFILES_DIR/tmux" "$HOME/.config/tmux"
ln -sf "$DOTFILES_DIR/yazi" "$HOME/.config/yazi"
ln -sf "$DOTFILES_DIR/.zshrc" "$HOME/.zshrc"

echo "Config files linked successfully!"
echo "Any existing configs have been backed up with .backup extension"
echo "To restore backups, remove symlinks and rename .backup files"



================================================================
End of Codebase
================================================================
